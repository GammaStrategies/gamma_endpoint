"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type FeeCollectionSnapshot {
  """{Fee Snapshot ID}-{FeeCollectionSnapshotType}"""
  id: String!

  """Pool tick"""
  type: FeeCollectionSnapshotType!

  """Parent feeSnapshot entity ID"""
  feeSnapshot: FeeSnapshot!

  """Protocol Fee"""
  fee: Int!

  """Pool tick"""
  tick: Int!

  """Token 0 price"""
  price0: BigDecimal!

  """Token1 price"""
  price1: BigDecimal!

  """Total supply of vault tokens"""
  totalSupply: BigInt!

  """Token0 portion of TVL"""
  tvl0: BigInt!

  """Token1 portion of TVL"""
  tvl1: BigInt!

  """TVL in USD"""
  tvlUSD: BigDecimal!

  """fee growth global of token 0"""
  feeGrowthGlobal0X128: BigInt!

  """fee growth global of token 1"""
  feeGrowthGlobal1X128: BigInt!

  """Base position snapshot"""
  basePosition: PositionSnapshot!

  """Limit position snapshot"""
  limitPosition: PositionSnapshot!

  """Inidicates whether entity has been initialised with data"""
  _initialized: Boolean!
}

enum FeeCollectionSnapshotType {
  current
  previous
}

input FeeCollectionSnapshot_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  type: FeeCollectionSnapshotType
  type_not: FeeCollectionSnapshotType
  type_in: [FeeCollectionSnapshotType!]
  type_not_in: [FeeCollectionSnapshotType!]
  feeSnapshot: String
  feeSnapshot_not: String
  feeSnapshot_gt: String
  feeSnapshot_lt: String
  feeSnapshot_gte: String
  feeSnapshot_lte: String
  feeSnapshot_in: [String!]
  feeSnapshot_not_in: [String!]
  feeSnapshot_contains: String
  feeSnapshot_contains_nocase: String
  feeSnapshot_not_contains: String
  feeSnapshot_not_contains_nocase: String
  feeSnapshot_starts_with: String
  feeSnapshot_starts_with_nocase: String
  feeSnapshot_not_starts_with: String
  feeSnapshot_not_starts_with_nocase: String
  feeSnapshot_ends_with: String
  feeSnapshot_ends_with_nocase: String
  feeSnapshot_not_ends_with: String
  feeSnapshot_not_ends_with_nocase: String
  feeSnapshot_: FeeSnapshot_filter
  fee: Int
  fee_not: Int
  fee_gt: Int
  fee_lt: Int
  fee_gte: Int
  fee_lte: Int
  fee_in: [Int!]
  fee_not_in: [Int!]
  tick: Int
  tick_not: Int
  tick_gt: Int
  tick_lt: Int
  tick_gte: Int
  tick_lte: Int
  tick_in: [Int!]
  tick_not_in: [Int!]
  price0: BigDecimal
  price0_not: BigDecimal
  price0_gt: BigDecimal
  price0_lt: BigDecimal
  price0_gte: BigDecimal
  price0_lte: BigDecimal
  price0_in: [BigDecimal!]
  price0_not_in: [BigDecimal!]
  price1: BigDecimal
  price1_not: BigDecimal
  price1_gt: BigDecimal
  price1_lt: BigDecimal
  price1_gte: BigDecimal
  price1_lte: BigDecimal
  price1_in: [BigDecimal!]
  price1_not_in: [BigDecimal!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  tvl0: BigInt
  tvl0_not: BigInt
  tvl0_gt: BigInt
  tvl0_lt: BigInt
  tvl0_gte: BigInt
  tvl0_lte: BigInt
  tvl0_in: [BigInt!]
  tvl0_not_in: [BigInt!]
  tvl1: BigInt
  tvl1_not: BigInt
  tvl1_gt: BigInt
  tvl1_lt: BigInt
  tvl1_gte: BigInt
  tvl1_lte: BigInt
  tvl1_in: [BigInt!]
  tvl1_not_in: [BigInt!]
  tvlUSD: BigDecimal
  tvlUSD_not: BigDecimal
  tvlUSD_gt: BigDecimal
  tvlUSD_lt: BigDecimal
  tvlUSD_gte: BigDecimal
  tvlUSD_lte: BigDecimal
  tvlUSD_in: [BigDecimal!]
  tvlUSD_not_in: [BigDecimal!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  basePosition: String
  basePosition_not: String
  basePosition_gt: String
  basePosition_lt: String
  basePosition_gte: String
  basePosition_lte: String
  basePosition_in: [String!]
  basePosition_not_in: [String!]
  basePosition_contains: String
  basePosition_contains_nocase: String
  basePosition_not_contains: String
  basePosition_not_contains_nocase: String
  basePosition_starts_with: String
  basePosition_starts_with_nocase: String
  basePosition_not_starts_with: String
  basePosition_not_starts_with_nocase: String
  basePosition_ends_with: String
  basePosition_ends_with_nocase: String
  basePosition_not_ends_with: String
  basePosition_not_ends_with_nocase: String
  basePosition_: PositionSnapshot_filter
  limitPosition: String
  limitPosition_not: String
  limitPosition_gt: String
  limitPosition_lt: String
  limitPosition_gte: String
  limitPosition_lte: String
  limitPosition_in: [String!]
  limitPosition_not_in: [String!]
  limitPosition_contains: String
  limitPosition_contains_nocase: String
  limitPosition_not_contains: String
  limitPosition_not_contains_nocase: String
  limitPosition_starts_with: String
  limitPosition_starts_with_nocase: String
  limitPosition_not_starts_with: String
  limitPosition_not_starts_with_nocase: String
  limitPosition_ends_with: String
  limitPosition_ends_with_nocase: String
  limitPosition_not_ends_with: String
  limitPosition_not_ends_with_nocase: String
  limitPosition_: PositionSnapshot_filter
  _initialized: Boolean
  _initialized_not: Boolean
  _initialized_in: [Boolean!]
  _initialized_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeeCollectionSnapshot_filter]
  or: [FeeCollectionSnapshot_filter]
}

enum FeeCollectionSnapshot_orderBy {
  id
  type
  feeSnapshot
  feeSnapshot__id
  feeSnapshot__blockNumber
  feeSnapshot__timestamp
  fee
  tick
  price0
  price1
  totalSupply
  tvl0
  tvl1
  tvlUSD
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  basePosition
  basePosition__id
  basePosition__type
  basePosition__liquidity
  basePosition__tokensOwed0
  basePosition__tokensOwed1
  basePosition__feeGrowthInside0X128
  basePosition__feeGrowthInside1X128
  limitPosition
  limitPosition__id
  limitPosition__type
  limitPosition__liquidity
  limitPosition__tokensOwed0
  limitPosition__tokensOwed1
  limitPosition__feeGrowthInside0X128
  limitPosition__feeGrowthInside1X128
  _initialized
}

type FeeSnapshot {
  """{hypervisor}-{block}"""
  id: String!
  hypervisor: Hypervisor!
  blockNumber: BigInt!
  timestamp: BigInt!
  previousBlock: FeeCollectionSnapshot!
  currentBlock: FeeCollectionSnapshot!
}

input FeeSnapshot_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: Hypervisor_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  previousBlock: String
  previousBlock_not: String
  previousBlock_gt: String
  previousBlock_lt: String
  previousBlock_gte: String
  previousBlock_lte: String
  previousBlock_in: [String!]
  previousBlock_not_in: [String!]
  previousBlock_contains: String
  previousBlock_contains_nocase: String
  previousBlock_not_contains: String
  previousBlock_not_contains_nocase: String
  previousBlock_starts_with: String
  previousBlock_starts_with_nocase: String
  previousBlock_not_starts_with: String
  previousBlock_not_starts_with_nocase: String
  previousBlock_ends_with: String
  previousBlock_ends_with_nocase: String
  previousBlock_not_ends_with: String
  previousBlock_not_ends_with_nocase: String
  previousBlock_: FeeCollectionSnapshot_filter
  currentBlock: String
  currentBlock_not: String
  currentBlock_gt: String
  currentBlock_lt: String
  currentBlock_gte: String
  currentBlock_lte: String
  currentBlock_in: [String!]
  currentBlock_not_in: [String!]
  currentBlock_contains: String
  currentBlock_contains_nocase: String
  currentBlock_not_contains: String
  currentBlock_not_contains_nocase: String
  currentBlock_starts_with: String
  currentBlock_starts_with_nocase: String
  currentBlock_not_starts_with: String
  currentBlock_not_starts_with_nocase: String
  currentBlock_ends_with: String
  currentBlock_ends_with_nocase: String
  currentBlock_not_ends_with: String
  currentBlock_not_ends_with_nocase: String
  currentBlock_: FeeCollectionSnapshot_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeeSnapshot_filter]
  or: [FeeSnapshot_filter]
}

enum FeeSnapshot_orderBy {
  id
  hypervisor
  hypervisor__id
  hypervisor__symbol
  hypervisor__fee
  hypervisor__totalSupply
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__lastUpdatedBlock
  hypervisor___previousTotalSupply
  hypervisor___previousTvl0
  hypervisor___previousTvl1
  hypervisor___previousTvlUSD
  blockNumber
  timestamp
  previousBlock
  previousBlock__id
  previousBlock__type
  previousBlock__fee
  previousBlock__tick
  previousBlock__price0
  previousBlock__price1
  previousBlock__totalSupply
  previousBlock__tvl0
  previousBlock__tvl1
  previousBlock__tvlUSD
  previousBlock__feeGrowthGlobal0X128
  previousBlock__feeGrowthGlobal1X128
  previousBlock___initialized
  currentBlock
  currentBlock__id
  currentBlock__type
  currentBlock__fee
  currentBlock__tick
  currentBlock__price0
  currentBlock__price1
  currentBlock__totalSupply
  currentBlock__tvl0
  currentBlock__tvl1
  currentBlock__tvlUSD
  currentBlock__feeGrowthGlobal0X128
  currentBlock__feeGrowthGlobal1X128
  currentBlock___initialized
}

type Hypervisor {
  """Address of hypervisor"""
  id: Bytes!

  """symbol of hypervisor token"""
  symbol: String!

  """Address of underlying pool"""
  pool: Pool!

  """Protocol Fee"""
  fee: Int!

  """Total supply of vault tokens"""
  totalSupply: BigInt!

  """TVL of token 0"""
  tvl0: BigInt!

  """TVL of token 1"""
  tvl1: BigInt!

  """TVL in USD"""
  tvlUSD: BigDecimal!

  """Base position attributes"""
  basePosition: HypervisorPosition!

  """limit position attributes"""
  limitPosition: HypervisorPosition!

  """Fee snapshots"""
  feeSnapshots(skip: Int = 0, first: Int = 100, orderBy: FeeSnapshot_orderBy, orderDirection: OrderDirection, where: FeeSnapshot_filter): [FeeSnapshot!]!

  """Last updated block for TVL fields"""
  lastUpdatedBlock: BigInt!

  """Previous total supply of vault tokens before update"""
  _previousTotalSupply: BigInt!

  """Previous TVL of token 0 before update"""
  _previousTvl0: BigInt!

  """Previous TVL of token 1 before update"""
  _previousTvl1: BigInt!

  """Previous TVL in USD before update"""
  _previousTvlUSD: BigDecimal!
}

type HypervisorPosition {
  """{Hypervisor ID}-{Position Type}"""
  id: String!

  """Hypervisor address of this position"""
  hypervisor: Hypervisor!

  """Whether this is a base or limit position"""
  type: HypervisorPositionType!

  """Position key for querying pool"""
  key: Bytes

  """The lower tick for this position range"""
  tickLower: Tick!

  """The upper tick for this position range"""
  tickUpper: Tick!

  """Liquidity associated with this position"""
  liquidity: BigInt!

  """Token 0 owed"""
  tokensOwed0: BigInt!

  """Token 1 owed"""
  tokensOwed1: BigInt!

  """Fee growth inside of token 0"""
  feeGrowthInside0X128: BigInt!

  """Fee growth inside of token 1"""
  feeGrowthInside1X128: BigInt!

  """Block in which tick was last updated"""
  lastUpdatedBlock: BigInt!
}

enum HypervisorPositionType {
  base
  limit
}

input HypervisorPosition_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: Hypervisor_filter
  type: HypervisorPositionType
  type_not: HypervisorPositionType
  type_in: [HypervisorPositionType!]
  type_not_in: [HypervisorPositionType!]
  key: Bytes
  key_not: Bytes
  key_gt: Bytes
  key_lt: Bytes
  key_gte: Bytes
  key_lte: Bytes
  key_in: [Bytes!]
  key_not_in: [Bytes!]
  key_contains: Bytes
  key_not_contains: Bytes
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: Tick_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: Tick_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  tokensOwed0: BigInt
  tokensOwed0_not: BigInt
  tokensOwed0_gt: BigInt
  tokensOwed0_lt: BigInt
  tokensOwed0_gte: BigInt
  tokensOwed0_lte: BigInt
  tokensOwed0_in: [BigInt!]
  tokensOwed0_not_in: [BigInt!]
  tokensOwed1: BigInt
  tokensOwed1_not: BigInt
  tokensOwed1_gt: BigInt
  tokensOwed1_lt: BigInt
  tokensOwed1_gte: BigInt
  tokensOwed1_lte: BigInt
  tokensOwed1_in: [BigInt!]
  tokensOwed1_not_in: [BigInt!]
  feeGrowthInside0X128: BigInt
  feeGrowthInside0X128_not: BigInt
  feeGrowthInside0X128_gt: BigInt
  feeGrowthInside0X128_lt: BigInt
  feeGrowthInside0X128_gte: BigInt
  feeGrowthInside0X128_lte: BigInt
  feeGrowthInside0X128_in: [BigInt!]
  feeGrowthInside0X128_not_in: [BigInt!]
  feeGrowthInside1X128: BigInt
  feeGrowthInside1X128_not: BigInt
  feeGrowthInside1X128_gt: BigInt
  feeGrowthInside1X128_lt: BigInt
  feeGrowthInside1X128_gte: BigInt
  feeGrowthInside1X128_lte: BigInt
  feeGrowthInside1X128_in: [BigInt!]
  feeGrowthInside1X128_not_in: [BigInt!]
  lastUpdatedBlock: BigInt
  lastUpdatedBlock_not: BigInt
  lastUpdatedBlock_gt: BigInt
  lastUpdatedBlock_lt: BigInt
  lastUpdatedBlock_gte: BigInt
  lastUpdatedBlock_lte: BigInt
  lastUpdatedBlock_in: [BigInt!]
  lastUpdatedBlock_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [HypervisorPosition_filter]
  or: [HypervisorPosition_filter]
}

enum HypervisorPosition_orderBy {
  id
  hypervisor
  hypervisor__id
  hypervisor__symbol
  hypervisor__fee
  hypervisor__totalSupply
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__lastUpdatedBlock
  hypervisor___previousTotalSupply
  hypervisor___previousTvl0
  hypervisor___previousTvl1
  hypervisor___previousTvlUSD
  type
  key
  tickLower
  tickLower__id
  tickLower__tickIdx
  tickLower__feeGrowthOutside0X128
  tickLower__feeGrowthOutside1X128
  tickLower__lastUpdatedBlock
  tickLower___previousTickIdx
  tickLower___previousFeeGrowthOutside0X128
  tickLower___previousFeeGrowthOutside1X128
  tickUpper
  tickUpper__id
  tickUpper__tickIdx
  tickUpper__feeGrowthOutside0X128
  tickUpper__feeGrowthOutside1X128
  tickUpper__lastUpdatedBlock
  tickUpper___previousTickIdx
  tickUpper___previousFeeGrowthOutside0X128
  tickUpper___previousFeeGrowthOutside1X128
  liquidity
  tokensOwed0
  tokensOwed1
  feeGrowthInside0X128
  feeGrowthInside1X128
  lastUpdatedBlock
}

input Hypervisor_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  fee: Int
  fee_not: Int
  fee_gt: Int
  fee_lt: Int
  fee_gte: Int
  fee_lte: Int
  fee_in: [Int!]
  fee_not_in: [Int!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  tvl0: BigInt
  tvl0_not: BigInt
  tvl0_gt: BigInt
  tvl0_lt: BigInt
  tvl0_gte: BigInt
  tvl0_lte: BigInt
  tvl0_in: [BigInt!]
  tvl0_not_in: [BigInt!]
  tvl1: BigInt
  tvl1_not: BigInt
  tvl1_gt: BigInt
  tvl1_lt: BigInt
  tvl1_gte: BigInt
  tvl1_lte: BigInt
  tvl1_in: [BigInt!]
  tvl1_not_in: [BigInt!]
  tvlUSD: BigDecimal
  tvlUSD_not: BigDecimal
  tvlUSD_gt: BigDecimal
  tvlUSD_lt: BigDecimal
  tvlUSD_gte: BigDecimal
  tvlUSD_lte: BigDecimal
  tvlUSD_in: [BigDecimal!]
  tvlUSD_not_in: [BigDecimal!]
  basePosition: String
  basePosition_not: String
  basePosition_gt: String
  basePosition_lt: String
  basePosition_gte: String
  basePosition_lte: String
  basePosition_in: [String!]
  basePosition_not_in: [String!]
  basePosition_contains: String
  basePosition_contains_nocase: String
  basePosition_not_contains: String
  basePosition_not_contains_nocase: String
  basePosition_starts_with: String
  basePosition_starts_with_nocase: String
  basePosition_not_starts_with: String
  basePosition_not_starts_with_nocase: String
  basePosition_ends_with: String
  basePosition_ends_with_nocase: String
  basePosition_not_ends_with: String
  basePosition_not_ends_with_nocase: String
  basePosition_: HypervisorPosition_filter
  limitPosition: String
  limitPosition_not: String
  limitPosition_gt: String
  limitPosition_lt: String
  limitPosition_gte: String
  limitPosition_lte: String
  limitPosition_in: [String!]
  limitPosition_not_in: [String!]
  limitPosition_contains: String
  limitPosition_contains_nocase: String
  limitPosition_not_contains: String
  limitPosition_not_contains_nocase: String
  limitPosition_starts_with: String
  limitPosition_starts_with_nocase: String
  limitPosition_not_starts_with: String
  limitPosition_not_starts_with_nocase: String
  limitPosition_ends_with: String
  limitPosition_ends_with_nocase: String
  limitPosition_not_ends_with: String
  limitPosition_not_ends_with_nocase: String
  limitPosition_: HypervisorPosition_filter
  feeSnapshots_: FeeSnapshot_filter
  lastUpdatedBlock: BigInt
  lastUpdatedBlock_not: BigInt
  lastUpdatedBlock_gt: BigInt
  lastUpdatedBlock_lt: BigInt
  lastUpdatedBlock_gte: BigInt
  lastUpdatedBlock_lte: BigInt
  lastUpdatedBlock_in: [BigInt!]
  lastUpdatedBlock_not_in: [BigInt!]
  _previousTotalSupply: BigInt
  _previousTotalSupply_not: BigInt
  _previousTotalSupply_gt: BigInt
  _previousTotalSupply_lt: BigInt
  _previousTotalSupply_gte: BigInt
  _previousTotalSupply_lte: BigInt
  _previousTotalSupply_in: [BigInt!]
  _previousTotalSupply_not_in: [BigInt!]
  _previousTvl0: BigInt
  _previousTvl0_not: BigInt
  _previousTvl0_gt: BigInt
  _previousTvl0_lt: BigInt
  _previousTvl0_gte: BigInt
  _previousTvl0_lte: BigInt
  _previousTvl0_in: [BigInt!]
  _previousTvl0_not_in: [BigInt!]
  _previousTvl1: BigInt
  _previousTvl1_not: BigInt
  _previousTvl1_gt: BigInt
  _previousTvl1_lt: BigInt
  _previousTvl1_gte: BigInt
  _previousTvl1_lte: BigInt
  _previousTvl1_in: [BigInt!]
  _previousTvl1_not_in: [BigInt!]
  _previousTvlUSD: BigDecimal
  _previousTvlUSD_not: BigDecimal
  _previousTvlUSD_gt: BigDecimal
  _previousTvlUSD_lt: BigDecimal
  _previousTvlUSD_gte: BigDecimal
  _previousTvlUSD_lte: BigDecimal
  _previousTvlUSD_in: [BigDecimal!]
  _previousTvlUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Hypervisor_filter]
  or: [Hypervisor_filter]
}

enum Hypervisor_orderBy {
  id
  symbol
  pool
  pool__id
  pool__tickSpacing
  pool__currentTick
  pool__sqrtPriceX96
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__lastUpdatedBlock
  pool__lastHypervisorRefreshTime
  pool___previousTick
  pool___previousFeeGrowthGlobal0X128
  pool___previousFeeGrowthGlobal1X128
  pool___protocol
  fee
  totalSupply
  tvl0
  tvl1
  tvlUSD
  basePosition
  basePosition__id
  basePosition__type
  basePosition__key
  basePosition__liquidity
  basePosition__tokensOwed0
  basePosition__tokensOwed1
  basePosition__feeGrowthInside0X128
  basePosition__feeGrowthInside1X128
  basePosition__lastUpdatedBlock
  limitPosition
  limitPosition__id
  limitPosition__type
  limitPosition__key
  limitPosition__liquidity
  limitPosition__tokensOwed0
  limitPosition__tokensOwed1
  limitPosition__feeGrowthInside0X128
  limitPosition__feeGrowthInside1X128
  limitPosition__lastUpdatedBlock
  feeSnapshots
  lastUpdatedBlock
  _previousTotalSupply
  _previousTvl0
  _previousTvl1
  _previousTvlUSD
}

enum Network {
  mainnet
  arbitrum
  celo
  matic
  optimism
  bsc
  pzke
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Pool {
  """Address of DEX pool"""
  id: Bytes!

  """Token 0"""
  token0: Token!

  """Token 1"""
  token1: Token!

  """Tick spacing for pool"""
  tickSpacing: BigInt!

  """Current tick"""
  currentTick: Int!

  """Pool price"""
  sqrtPriceX96: BigInt!

  """fee growth global of token 0"""
  feeGrowthGlobal0X128: BigInt!

  """fee growth global of token 1"""
  feeGrowthGlobal1X128: BigInt!

  """Hypervisors using this pool"""
  hypervisors(skip: Int = 0, first: Int = 100, orderBy: Hypervisor_orderBy, orderDirection: OrderDirection, where: Hypervisor_filter): [Hypervisor!]!

  """Ticks for this pool"""
  ticks(skip: Int = 0, first: Int = 100, orderBy: Tick_orderBy, orderDirection: OrderDirection, where: Tick_filter): [Tick!]!

  """Pricing fields"""
  pricing: _PoolPricing!

  """Last updated block for fee growth"""
  lastUpdatedBlock: BigInt!

  """Last timestamp when hypervisor list was updated with TVL"""
  lastHypervisorRefreshTime: BigInt!

  """Hypervisors currently using pool"""
  _hypervisors: [String!]!

  """
  Ticks currently used for lower and upper ticks in associated hypervisors
  """
  _ticksActive: [Int!]!

  """Previous tick"""
  _previousTick: Int!

  """fee growth global of token 0 from before latest update"""
  _previousFeeGrowthGlobal0X128: BigInt!

  """fee growth global of token 1 from before latest update"""
  _previousFeeGrowthGlobal1X128: BigInt!

  """Flag for pools that need fee growth updated"""
  _protocol: UnderlyingProtocol!
}

input Pool_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  tickSpacing: BigInt
  tickSpacing_not: BigInt
  tickSpacing_gt: BigInt
  tickSpacing_lt: BigInt
  tickSpacing_gte: BigInt
  tickSpacing_lte: BigInt
  tickSpacing_in: [BigInt!]
  tickSpacing_not_in: [BigInt!]
  currentTick: Int
  currentTick_not: Int
  currentTick_gt: Int
  currentTick_lt: Int
  currentTick_gte: Int
  currentTick_lte: Int
  currentTick_in: [Int!]
  currentTick_not_in: [Int!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  hypervisors_: Hypervisor_filter
  ticks_: Tick_filter
  pricing: String
  pricing_not: String
  pricing_gt: String
  pricing_lt: String
  pricing_gte: String
  pricing_lte: String
  pricing_in: [String!]
  pricing_not_in: [String!]
  pricing_contains: String
  pricing_contains_nocase: String
  pricing_not_contains: String
  pricing_not_contains_nocase: String
  pricing_starts_with: String
  pricing_starts_with_nocase: String
  pricing_not_starts_with: String
  pricing_not_starts_with_nocase: String
  pricing_ends_with: String
  pricing_ends_with_nocase: String
  pricing_not_ends_with: String
  pricing_not_ends_with_nocase: String
  pricing_: _PoolPricing_filter
  lastUpdatedBlock: BigInt
  lastUpdatedBlock_not: BigInt
  lastUpdatedBlock_gt: BigInt
  lastUpdatedBlock_lt: BigInt
  lastUpdatedBlock_gte: BigInt
  lastUpdatedBlock_lte: BigInt
  lastUpdatedBlock_in: [BigInt!]
  lastUpdatedBlock_not_in: [BigInt!]
  lastHypervisorRefreshTime: BigInt
  lastHypervisorRefreshTime_not: BigInt
  lastHypervisorRefreshTime_gt: BigInt
  lastHypervisorRefreshTime_lt: BigInt
  lastHypervisorRefreshTime_gte: BigInt
  lastHypervisorRefreshTime_lte: BigInt
  lastHypervisorRefreshTime_in: [BigInt!]
  lastHypervisorRefreshTime_not_in: [BigInt!]
  _hypervisors: [String!]
  _hypervisors_not: [String!]
  _hypervisors_contains: [String!]
  _hypervisors_contains_nocase: [String!]
  _hypervisors_not_contains: [String!]
  _hypervisors_not_contains_nocase: [String!]
  _ticksActive: [Int!]
  _ticksActive_not: [Int!]
  _ticksActive_contains: [Int!]
  _ticksActive_contains_nocase: [Int!]
  _ticksActive_not_contains: [Int!]
  _ticksActive_not_contains_nocase: [Int!]
  _previousTick: Int
  _previousTick_not: Int
  _previousTick_gt: Int
  _previousTick_lt: Int
  _previousTick_gte: Int
  _previousTick_lte: Int
  _previousTick_in: [Int!]
  _previousTick_not_in: [Int!]
  _previousFeeGrowthGlobal0X128: BigInt
  _previousFeeGrowthGlobal0X128_not: BigInt
  _previousFeeGrowthGlobal0X128_gt: BigInt
  _previousFeeGrowthGlobal0X128_lt: BigInt
  _previousFeeGrowthGlobal0X128_gte: BigInt
  _previousFeeGrowthGlobal0X128_lte: BigInt
  _previousFeeGrowthGlobal0X128_in: [BigInt!]
  _previousFeeGrowthGlobal0X128_not_in: [BigInt!]
  _previousFeeGrowthGlobal1X128: BigInt
  _previousFeeGrowthGlobal1X128_not: BigInt
  _previousFeeGrowthGlobal1X128_gt: BigInt
  _previousFeeGrowthGlobal1X128_lt: BigInt
  _previousFeeGrowthGlobal1X128_gte: BigInt
  _previousFeeGrowthGlobal1X128_lte: BigInt
  _previousFeeGrowthGlobal1X128_in: [BigInt!]
  _previousFeeGrowthGlobal1X128_not_in: [BigInt!]
  _protocol: UnderlyingProtocol
  _protocol_not: UnderlyingProtocol
  _protocol_in: [UnderlyingProtocol!]
  _protocol_not_in: [UnderlyingProtocol!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
}

enum Pool_orderBy {
  id
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__priceUSD
  token0__lastUpdatedBlock
  token0__lastUpdatedTimestamp
  token0___previousPriceUSD
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__priceUSD
  token1__lastUpdatedBlock
  token1__lastUpdatedTimestamp
  token1___previousPriceUSD
  tickSpacing
  currentTick
  sqrtPriceX96
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  hypervisors
  ticks
  pricing
  pricing__id
  pricing__baseTokenIndex
  pricing__priceTokenInBase
  pricing__priceBaseInUSD
  lastUpdatedBlock
  lastHypervisorRefreshTime
  _hypervisors
  _ticksActive
  _previousTick
  _previousFeeGrowthGlobal0X128
  _previousFeeGrowthGlobal1X128
  _protocol
}

type PositionSnapshot {
  """{feeCollectionSnapshot ID}-{positionType}"""
  id: String!

  """Position Type"""
  type: HypervisorPositionType!

  """Parent fee collection snapshot"""
  feeCollectionSnapshot: FeeCollectionSnapshot!

  """The lower tick for this position range"""
  tickLower: TickSnapshot!

  """The upper tick for this position range"""
  tickUpper: TickSnapshot!

  """Liquidity associated with this position"""
  liquidity: BigInt!

  """Token 0 owed"""
  tokensOwed0: BigInt!

  """Token 1 owed"""
  tokensOwed1: BigInt!

  """Fee growth inside of token 0"""
  feeGrowthInside0X128: BigInt!

  """Fee growth inside of token 1"""
  feeGrowthInside1X128: BigInt!
}

input PositionSnapshot_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  type: HypervisorPositionType
  type_not: HypervisorPositionType
  type_in: [HypervisorPositionType!]
  type_not_in: [HypervisorPositionType!]
  feeCollectionSnapshot: String
  feeCollectionSnapshot_not: String
  feeCollectionSnapshot_gt: String
  feeCollectionSnapshot_lt: String
  feeCollectionSnapshot_gte: String
  feeCollectionSnapshot_lte: String
  feeCollectionSnapshot_in: [String!]
  feeCollectionSnapshot_not_in: [String!]
  feeCollectionSnapshot_contains: String
  feeCollectionSnapshot_contains_nocase: String
  feeCollectionSnapshot_not_contains: String
  feeCollectionSnapshot_not_contains_nocase: String
  feeCollectionSnapshot_starts_with: String
  feeCollectionSnapshot_starts_with_nocase: String
  feeCollectionSnapshot_not_starts_with: String
  feeCollectionSnapshot_not_starts_with_nocase: String
  feeCollectionSnapshot_ends_with: String
  feeCollectionSnapshot_ends_with_nocase: String
  feeCollectionSnapshot_not_ends_with: String
  feeCollectionSnapshot_not_ends_with_nocase: String
  feeCollectionSnapshot_: FeeCollectionSnapshot_filter
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: TickSnapshot_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: TickSnapshot_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  tokensOwed0: BigInt
  tokensOwed0_not: BigInt
  tokensOwed0_gt: BigInt
  tokensOwed0_lt: BigInt
  tokensOwed0_gte: BigInt
  tokensOwed0_lte: BigInt
  tokensOwed0_in: [BigInt!]
  tokensOwed0_not_in: [BigInt!]
  tokensOwed1: BigInt
  tokensOwed1_not: BigInt
  tokensOwed1_gt: BigInt
  tokensOwed1_lt: BigInt
  tokensOwed1_gte: BigInt
  tokensOwed1_lte: BigInt
  tokensOwed1_in: [BigInt!]
  tokensOwed1_not_in: [BigInt!]
  feeGrowthInside0X128: BigInt
  feeGrowthInside0X128_not: BigInt
  feeGrowthInside0X128_gt: BigInt
  feeGrowthInside0X128_lt: BigInt
  feeGrowthInside0X128_gte: BigInt
  feeGrowthInside0X128_lte: BigInt
  feeGrowthInside0X128_in: [BigInt!]
  feeGrowthInside0X128_not_in: [BigInt!]
  feeGrowthInside1X128: BigInt
  feeGrowthInside1X128_not: BigInt
  feeGrowthInside1X128_gt: BigInt
  feeGrowthInside1X128_lt: BigInt
  feeGrowthInside1X128_gte: BigInt
  feeGrowthInside1X128_lte: BigInt
  feeGrowthInside1X128_in: [BigInt!]
  feeGrowthInside1X128_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionSnapshot_filter]
  or: [PositionSnapshot_filter]
}

enum PositionSnapshot_orderBy {
  id
  type
  feeCollectionSnapshot
  feeCollectionSnapshot__id
  feeCollectionSnapshot__type
  feeCollectionSnapshot__fee
  feeCollectionSnapshot__tick
  feeCollectionSnapshot__price0
  feeCollectionSnapshot__price1
  feeCollectionSnapshot__totalSupply
  feeCollectionSnapshot__tvl0
  feeCollectionSnapshot__tvl1
  feeCollectionSnapshot__tvlUSD
  feeCollectionSnapshot__feeGrowthGlobal0X128
  feeCollectionSnapshot__feeGrowthGlobal1X128
  feeCollectionSnapshot___initialized
  tickLower
  tickLower__id
  tickLower__type
  tickLower__tickIdx
  tickLower__feeGrowthOutside0X128
  tickLower__feeGrowthOutside1X128
  tickUpper
  tickUpper__id
  tickUpper__type
  tickUpper__tickIdx
  tickUpper__feeGrowthOutside0X128
  tickUpper__feeGrowthOutside1X128
  liquidity
  tokensOwed0
  tokensOwed1
  feeGrowthInside0X128
  feeGrowthInside1X128
}

type Protocol {
  """Hypervisor registry address"""
  id: String!

  """Name of protocol"""
  name: String!

  """Underlying infrastructure protocol"""
  underlyingProtocol: UnderlyingProtocol!

  """Network/chain"""
  network: Network!

  """Subgraph version"""
  version: String!
}

input Protocol_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  underlyingProtocol: UnderlyingProtocol
  underlyingProtocol_not: UnderlyingProtocol
  underlyingProtocol_in: [UnderlyingProtocol!]
  underlyingProtocol_not_in: [UnderlyingProtocol!]
  network: Network
  network_not: Network
  network_in: [Network!]
  network_not_in: [Network!]
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Protocol_filter]
  or: [Protocol_filter]
}

enum Protocol_orderBy {
  id
  name
  underlyingProtocol
  network
  version
}

type Query {
  protocol(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  hypervisor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Hypervisor
  hypervisors(
    skip: Int = 0
    first: Int = 100
    orderBy: Hypervisor_orderBy
    orderDirection: OrderDirection
    where: Hypervisor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Hypervisor!]!
  hypervisorPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HypervisorPosition
  hypervisorPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: HypervisorPosition_orderBy
    orderDirection: OrderDirection
    where: HypervisorPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HypervisorPosition!]!
  pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  tick(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  feeSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeSnapshot
  feeSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeSnapshot_orderBy
    orderDirection: OrderDirection
    where: FeeSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeSnapshot!]!
  feeCollectionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeCollectionSnapshot
  feeCollectionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeCollectionSnapshot_orderBy
    orderDirection: OrderDirection
    where: FeeCollectionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeCollectionSnapshot!]!
  positionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionSnapshot
  positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionSnapshot!]!
  tickSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TickSnapshot
  tickSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TickSnapshot_orderBy
    orderDirection: OrderDirection
    where: TickSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TickSnapshot!]!
  poolPricing(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _PoolPricing
  poolPricings(
    skip: Int = 0
    first: Int = 100
    orderBy: _PoolPricing_orderBy
    orderDirection: OrderDirection
    where: _PoolPricing_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_PoolPricing!]!
  fastSync(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _FastSync
  fastSyncs(
    skip: Int = 0
    first: Int = 100
    orderBy: _FastSync_orderBy
    orderDirection: OrderDirection
    where: _FastSync_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_FastSync!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  protocol(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  hypervisor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Hypervisor
  hypervisors(
    skip: Int = 0
    first: Int = 100
    orderBy: Hypervisor_orderBy
    orderDirection: OrderDirection
    where: Hypervisor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Hypervisor!]!
  hypervisorPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HypervisorPosition
  hypervisorPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: HypervisorPosition_orderBy
    orderDirection: OrderDirection
    where: HypervisorPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HypervisorPosition!]!
  pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  tick(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  feeSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeSnapshot
  feeSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeSnapshot_orderBy
    orderDirection: OrderDirection
    where: FeeSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeSnapshot!]!
  feeCollectionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeCollectionSnapshot
  feeCollectionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeCollectionSnapshot_orderBy
    orderDirection: OrderDirection
    where: FeeCollectionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeCollectionSnapshot!]!
  positionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionSnapshot
  positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionSnapshot!]!
  tickSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TickSnapshot
  tickSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TickSnapshot_orderBy
    orderDirection: OrderDirection
    where: TickSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TickSnapshot!]!
  poolPricing(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _PoolPricing
  poolPricings(
    skip: Int = 0
    first: Int = 100
    orderBy: _PoolPricing_orderBy
    orderDirection: OrderDirection
    where: _PoolPricing_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_PoolPricing!]!
  fastSync(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _FastSync
  fastSyncs(
    skip: Int = 0
    first: Int = 100
    orderBy: _FastSync_orderBy
    orderDirection: OrderDirection
    where: _FastSync_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_FastSync!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Tick {
  """{pool}#{TickIdx}"""
  id: String!

  """Pool this tick is associated with"""
  pool: Pool!

  """Tick index"""
  tickIdx: Int!

  """Fee growth outside of token 0"""
  feeGrowthOutside0X128: BigInt!

  """Fee growth outside of token 1"""
  feeGrowthOutside1X128: BigInt!

  """Block in which tick was last updated for fee growth"""
  lastUpdatedBlock: BigInt!

  """Previous tick"""
  _previousTickIdx: Int!

  """fee growth global of token 0 from before latest update"""
  _previousFeeGrowthOutside0X128: BigInt!

  """fee growth global of token 1 from before latest update"""
  _previousFeeGrowthOutside1X128: BigInt!
}

type TickSnapshot {
  """{Position Snapshot ID}-{Tick Type}"""
  id: String!

  """Tick type"""
  type: TickType!

  """Parent position snapshot"""
  positionSnapshot: PositionSnapshot!

  """The lower tick for this position range"""
  tickIdx: Int!

  """Fee growth outside of token 0"""
  feeGrowthOutside0X128: BigInt!

  """Fee growth outside of token 1"""
  feeGrowthOutside1X128: BigInt!
}

input TickSnapshot_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  type: TickType
  type_not: TickType
  type_in: [TickType!]
  type_not_in: [TickType!]
  positionSnapshot: String
  positionSnapshot_not: String
  positionSnapshot_gt: String
  positionSnapshot_lt: String
  positionSnapshot_gte: String
  positionSnapshot_lte: String
  positionSnapshot_in: [String!]
  positionSnapshot_not_in: [String!]
  positionSnapshot_contains: String
  positionSnapshot_contains_nocase: String
  positionSnapshot_not_contains: String
  positionSnapshot_not_contains_nocase: String
  positionSnapshot_starts_with: String
  positionSnapshot_starts_with_nocase: String
  positionSnapshot_not_starts_with: String
  positionSnapshot_not_starts_with_nocase: String
  positionSnapshot_ends_with: String
  positionSnapshot_ends_with_nocase: String
  positionSnapshot_not_ends_with: String
  positionSnapshot_not_ends_with_nocase: String
  positionSnapshot_: PositionSnapshot_filter
  tickIdx: Int
  tickIdx_not: Int
  tickIdx_gt: Int
  tickIdx_lt: Int
  tickIdx_gte: Int
  tickIdx_lte: Int
  tickIdx_in: [Int!]
  tickIdx_not_in: [Int!]
  feeGrowthOutside0X128: BigInt
  feeGrowthOutside0X128_not: BigInt
  feeGrowthOutside0X128_gt: BigInt
  feeGrowthOutside0X128_lt: BigInt
  feeGrowthOutside0X128_gte: BigInt
  feeGrowthOutside0X128_lte: BigInt
  feeGrowthOutside0X128_in: [BigInt!]
  feeGrowthOutside0X128_not_in: [BigInt!]
  feeGrowthOutside1X128: BigInt
  feeGrowthOutside1X128_not: BigInt
  feeGrowthOutside1X128_gt: BigInt
  feeGrowthOutside1X128_lt: BigInt
  feeGrowthOutside1X128_gte: BigInt
  feeGrowthOutside1X128_lte: BigInt
  feeGrowthOutside1X128_in: [BigInt!]
  feeGrowthOutside1X128_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TickSnapshot_filter]
  or: [TickSnapshot_filter]
}

enum TickSnapshot_orderBy {
  id
  type
  positionSnapshot
  positionSnapshot__id
  positionSnapshot__type
  positionSnapshot__liquidity
  positionSnapshot__tokensOwed0
  positionSnapshot__tokensOwed1
  positionSnapshot__feeGrowthInside0X128
  positionSnapshot__feeGrowthInside1X128
  tickIdx
  feeGrowthOutside0X128
  feeGrowthOutside1X128
}

enum TickType {
  lower
  upper
}

input Tick_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  tickIdx: Int
  tickIdx_not: Int
  tickIdx_gt: Int
  tickIdx_lt: Int
  tickIdx_gte: Int
  tickIdx_lte: Int
  tickIdx_in: [Int!]
  tickIdx_not_in: [Int!]
  feeGrowthOutside0X128: BigInt
  feeGrowthOutside0X128_not: BigInt
  feeGrowthOutside0X128_gt: BigInt
  feeGrowthOutside0X128_lt: BigInt
  feeGrowthOutside0X128_gte: BigInt
  feeGrowthOutside0X128_lte: BigInt
  feeGrowthOutside0X128_in: [BigInt!]
  feeGrowthOutside0X128_not_in: [BigInt!]
  feeGrowthOutside1X128: BigInt
  feeGrowthOutside1X128_not: BigInt
  feeGrowthOutside1X128_gt: BigInt
  feeGrowthOutside1X128_lt: BigInt
  feeGrowthOutside1X128_gte: BigInt
  feeGrowthOutside1X128_lte: BigInt
  feeGrowthOutside1X128_in: [BigInt!]
  feeGrowthOutside1X128_not_in: [BigInt!]
  lastUpdatedBlock: BigInt
  lastUpdatedBlock_not: BigInt
  lastUpdatedBlock_gt: BigInt
  lastUpdatedBlock_lt: BigInt
  lastUpdatedBlock_gte: BigInt
  lastUpdatedBlock_lte: BigInt
  lastUpdatedBlock_in: [BigInt!]
  lastUpdatedBlock_not_in: [BigInt!]
  _previousTickIdx: Int
  _previousTickIdx_not: Int
  _previousTickIdx_gt: Int
  _previousTickIdx_lt: Int
  _previousTickIdx_gte: Int
  _previousTickIdx_lte: Int
  _previousTickIdx_in: [Int!]
  _previousTickIdx_not_in: [Int!]
  _previousFeeGrowthOutside0X128: BigInt
  _previousFeeGrowthOutside0X128_not: BigInt
  _previousFeeGrowthOutside0X128_gt: BigInt
  _previousFeeGrowthOutside0X128_lt: BigInt
  _previousFeeGrowthOutside0X128_gte: BigInt
  _previousFeeGrowthOutside0X128_lte: BigInt
  _previousFeeGrowthOutside0X128_in: [BigInt!]
  _previousFeeGrowthOutside0X128_not_in: [BigInt!]
  _previousFeeGrowthOutside1X128: BigInt
  _previousFeeGrowthOutside1X128_not: BigInt
  _previousFeeGrowthOutside1X128_gt: BigInt
  _previousFeeGrowthOutside1X128_lt: BigInt
  _previousFeeGrowthOutside1X128_gte: BigInt
  _previousFeeGrowthOutside1X128_lte: BigInt
  _previousFeeGrowthOutside1X128_in: [BigInt!]
  _previousFeeGrowthOutside1X128_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Tick_filter]
  or: [Tick_filter]
}

enum Tick_orderBy {
  id
  pool
  pool__id
  pool__tickSpacing
  pool__currentTick
  pool__sqrtPriceX96
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__lastUpdatedBlock
  pool__lastHypervisorRefreshTime
  pool___previousTick
  pool___previousFeeGrowthGlobal0X128
  pool___previousFeeGrowthGlobal1X128
  pool___protocol
  tickIdx
  feeGrowthOutside0X128
  feeGrowthOutside1X128
  lastUpdatedBlock
  _previousTickIdx
  _previousFeeGrowthOutside0X128
  _previousFeeGrowthOutside1X128
}

type Token {
  """token address"""
  id: Bytes!

  """token symbol"""
  symbol: String!

  """token name"""
  name: String!

  """token decimals"""
  decimals: Int!

  """token price in USD"""
  priceUSD: BigDecimal!

  """last updated block for price"""
  lastUpdatedBlock: BigInt!

  """last updated timestamp for price"""
  lastUpdatedTimestamp: BigInt!

  """token price in USD before it was updated"""
  _previousPriceUSD: BigDecimal!
}

input Token_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  priceUSD: BigDecimal
  priceUSD_not: BigDecimal
  priceUSD_gt: BigDecimal
  priceUSD_lt: BigDecimal
  priceUSD_gte: BigDecimal
  priceUSD_lte: BigDecimal
  priceUSD_in: [BigDecimal!]
  priceUSD_not_in: [BigDecimal!]
  lastUpdatedBlock: BigInt
  lastUpdatedBlock_not: BigInt
  lastUpdatedBlock_gt: BigInt
  lastUpdatedBlock_lt: BigInt
  lastUpdatedBlock_gte: BigInt
  lastUpdatedBlock_lte: BigInt
  lastUpdatedBlock_in: [BigInt!]
  lastUpdatedBlock_not_in: [BigInt!]
  lastUpdatedTimestamp: BigInt
  lastUpdatedTimestamp_not: BigInt
  lastUpdatedTimestamp_gt: BigInt
  lastUpdatedTimestamp_lt: BigInt
  lastUpdatedTimestamp_gte: BigInt
  lastUpdatedTimestamp_lte: BigInt
  lastUpdatedTimestamp_in: [BigInt!]
  lastUpdatedTimestamp_not_in: [BigInt!]
  _previousPriceUSD: BigDecimal
  _previousPriceUSD_not: BigDecimal
  _previousPriceUSD_gt: BigDecimal
  _previousPriceUSD_lt: BigDecimal
  _previousPriceUSD_gte: BigDecimal
  _previousPriceUSD_lte: BigDecimal
  _previousPriceUSD_in: [BigDecimal!]
  _previousPriceUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  symbol
  name
  decimals
  priceUSD
  lastUpdatedBlock
  lastUpdatedTimestamp
  _previousPriceUSD
}

enum UnderlyingProtocol {
  uniswapV3
  algebra
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

type _FastSync {
  id: String!
  activated: Boolean!
  syncBlock: BigInt!

  """Pools that need the initialised via template"""
  pools: [String!]!

  """Flag if pools have mass synced after sync block"""
  poolsInitialized: Boolean!
}

input _FastSync_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  activated: Boolean
  activated_not: Boolean
  activated_in: [Boolean!]
  activated_not_in: [Boolean!]
  syncBlock: BigInt
  syncBlock_not: BigInt
  syncBlock_gt: BigInt
  syncBlock_lt: BigInt
  syncBlock_gte: BigInt
  syncBlock_lte: BigInt
  syncBlock_in: [BigInt!]
  syncBlock_not_in: [BigInt!]
  pools: [String!]
  pools_not: [String!]
  pools_contains: [String!]
  pools_contains_nocase: [String!]
  pools_not_contains: [String!]
  pools_not_contains_nocase: [String!]
  poolsInitialized: Boolean
  poolsInitialized_not: Boolean
  poolsInitialized_in: [Boolean!]
  poolsInitialized_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [_FastSync_filter]
  or: [_FastSync_filter]
}

enum _FastSync_orderBy {
  id
  activated
  syncBlock
  pools
  poolsInitialized
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type _PoolPricing {
  """Pool ID"""
  id: Bytes!

  """Whether the base token token0 or token1"""
  baseTokenIndex: Int!

  """The base token"""
  baseToken: Token!

  """The path of uniswap V3 pools for calculating USD value"""
  usdPath: [String!]!

  """Whether the USD token in usdPool is token0 or token1"""
  usdPathIndex: [Int!]!

  """Price of non-base token in terms of the base token"""
  priceTokenInBase: BigDecimal!

  """Price of base token in USD"""
  priceBaseInUSD: BigDecimal!
}

input _PoolPricing_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  baseTokenIndex: Int
  baseTokenIndex_not: Int
  baseTokenIndex_gt: Int
  baseTokenIndex_lt: Int
  baseTokenIndex_gte: Int
  baseTokenIndex_lte: Int
  baseTokenIndex_in: [Int!]
  baseTokenIndex_not_in: [Int!]
  baseToken: String
  baseToken_not: String
  baseToken_gt: String
  baseToken_lt: String
  baseToken_gte: String
  baseToken_lte: String
  baseToken_in: [String!]
  baseToken_not_in: [String!]
  baseToken_contains: String
  baseToken_contains_nocase: String
  baseToken_not_contains: String
  baseToken_not_contains_nocase: String
  baseToken_starts_with: String
  baseToken_starts_with_nocase: String
  baseToken_not_starts_with: String
  baseToken_not_starts_with_nocase: String
  baseToken_ends_with: String
  baseToken_ends_with_nocase: String
  baseToken_not_ends_with: String
  baseToken_not_ends_with_nocase: String
  baseToken_: Token_filter
  usdPath: [String!]
  usdPath_not: [String!]
  usdPath_contains: [String!]
  usdPath_contains_nocase: [String!]
  usdPath_not_contains: [String!]
  usdPath_not_contains_nocase: [String!]
  usdPathIndex: [Int!]
  usdPathIndex_not: [Int!]
  usdPathIndex_contains: [Int!]
  usdPathIndex_contains_nocase: [Int!]
  usdPathIndex_not_contains: [Int!]
  usdPathIndex_not_contains_nocase: [Int!]
  priceTokenInBase: BigDecimal
  priceTokenInBase_not: BigDecimal
  priceTokenInBase_gt: BigDecimal
  priceTokenInBase_lt: BigDecimal
  priceTokenInBase_gte: BigDecimal
  priceTokenInBase_lte: BigDecimal
  priceTokenInBase_in: [BigDecimal!]
  priceTokenInBase_not_in: [BigDecimal!]
  priceBaseInUSD: BigDecimal
  priceBaseInUSD_not: BigDecimal
  priceBaseInUSD_gt: BigDecimal
  priceBaseInUSD_lt: BigDecimal
  priceBaseInUSD_gte: BigDecimal
  priceBaseInUSD_lte: BigDecimal
  priceBaseInUSD_in: [BigDecimal!]
  priceBaseInUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [_PoolPricing_filter]
  or: [_PoolPricing_filter]
}

enum _PoolPricing_orderBy {
  id
  baseTokenIndex
  baseToken
  baseToken__id
  baseToken__symbol
  baseToken__name
  baseToken__decimals
  baseToken__priceUSD
  baseToken__lastUpdatedBlock
  baseToken__lastUpdatedTimestamp
  baseToken___previousPriceUSD
  usdPath
  usdPathIndex
  priceTokenInBase
  priceBaseInUSD
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
