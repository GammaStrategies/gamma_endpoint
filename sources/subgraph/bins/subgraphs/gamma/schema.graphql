"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Each account is an address, this can either be an normal wallet or a visor vault
"""
type Account {
  id: ID!
  type: String!
  parent: User!
  gammaDeposited: BigInt!
  gammaEarnedRealized: BigInt!
  rewardHypervisorShares(skip: Int = 0, first: Int = 100, orderBy: RewardHypervisorShare_orderBy, orderDirection: OrderDirection, where: RewardHypervisorShare_filter): [RewardHypervisorShare!]!
  hypervisorCount: BigInt!
  hypervisorShares(skip: Int = 0, first: Int = 100, orderBy: UniswapV3HypervisorShare_orderBy, orderDirection: OrderDirection, where: UniswapV3HypervisorShare_filter): [UniswapV3HypervisorShare!]!
  mcPoolAccounts(skip: Int = 0, first: Int = 100, orderBy: MasterChefPoolAccount_orderBy, orderDirection: OrderDirection, where: MasterChefPoolAccount_filter): [MasterChefPoolAccount!]!
  mcv2PoolAccounts(skip: Int = 0, first: Int = 100, orderBy: MasterChefV2PoolAccount_orderBy, orderDirection: OrderDirection, where: MasterChefV2PoolAccount_filter): [MasterChefV2PoolAccount!]!
  mcv2RewarderPoolAccounts(skip: Int = 0, first: Int = 100, orderBy: MasterChefV2RewarderPoolAccount_orderBy, orderDirection: OrderDirection, where: MasterChefV2RewarderPoolAccount_filter): [MasterChefV2RewarderPoolAccount!]!
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  parent: String
  parent_not: String
  parent_gt: String
  parent_lt: String
  parent_gte: String
  parent_lte: String
  parent_in: [String!]
  parent_not_in: [String!]
  parent_contains: String
  parent_contains_nocase: String
  parent_not_contains: String
  parent_not_contains_nocase: String
  parent_starts_with: String
  parent_starts_with_nocase: String
  parent_not_starts_with: String
  parent_not_starts_with_nocase: String
  parent_ends_with: String
  parent_ends_with_nocase: String
  parent_not_ends_with: String
  parent_not_ends_with_nocase: String
  parent_: User_filter
  gammaDeposited: BigInt
  gammaDeposited_not: BigInt
  gammaDeposited_gt: BigInt
  gammaDeposited_lt: BigInt
  gammaDeposited_gte: BigInt
  gammaDeposited_lte: BigInt
  gammaDeposited_in: [BigInt!]
  gammaDeposited_not_in: [BigInt!]
  gammaEarnedRealized: BigInt
  gammaEarnedRealized_not: BigInt
  gammaEarnedRealized_gt: BigInt
  gammaEarnedRealized_lt: BigInt
  gammaEarnedRealized_gte: BigInt
  gammaEarnedRealized_lte: BigInt
  gammaEarnedRealized_in: [BigInt!]
  gammaEarnedRealized_not_in: [BigInt!]
  rewardHypervisorShares_: RewardHypervisorShare_filter
  hypervisorCount: BigInt
  hypervisorCount_not: BigInt
  hypervisorCount_gt: BigInt
  hypervisorCount_lt: BigInt
  hypervisorCount_gte: BigInt
  hypervisorCount_lte: BigInt
  hypervisorCount_in: [BigInt!]
  hypervisorCount_not_in: [BigInt!]
  hypervisorShares_: UniswapV3HypervisorShare_filter
  mcPoolAccounts_: MasterChefPoolAccount_filter
  mcv2PoolAccounts_: MasterChefV2PoolAccount_filter
  mcv2RewarderPoolAccounts_: MasterChefV2RewarderPoolAccount_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  type
  parent
  parent__id
  gammaDeposited
  gammaEarnedRealized
  rewardHypervisorShares
  hypervisorCount
  hypervisorShares
  mcPoolAccounts
  mcv2PoolAccounts
  mcv2RewarderPoolAccounts
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type DistributionDayData {
  id: ID!
  date: BigInt!
  timezone: String!
  token: Token!
  distributed: BigInt!
  distributedUSD: BigDecimal!
}

input DistributionDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  timezone: String
  timezone_not: String
  timezone_gt: String
  timezone_lt: String
  timezone_gte: String
  timezone_lte: String
  timezone_in: [String!]
  timezone_not_in: [String!]
  timezone_contains: String
  timezone_contains_nocase: String
  timezone_not_contains: String
  timezone_not_contains_nocase: String
  timezone_starts_with: String
  timezone_starts_with_nocase: String
  timezone_not_starts_with: String
  timezone_not_starts_with_nocase: String
  timezone_ends_with: String
  timezone_ends_with_nocase: String
  timezone_not_ends_with: String
  timezone_not_ends_with_nocase: String
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  distributed: BigInt
  distributed_not: BigInt
  distributed_gt: BigInt
  distributed_lt: BigInt
  distributed_gte: BigInt
  distributed_lte: BigInt
  distributed_in: [BigInt!]
  distributed_not_in: [BigInt!]
  distributedUSD: BigDecimal
  distributedUSD_not: BigDecimal
  distributedUSD_gt: BigDecimal
  distributedUSD_lt: BigDecimal
  distributedUSD_gte: BigDecimal
  distributedUSD_lte: BigDecimal
  distributedUSD_in: [BigDecimal!]
  distributedUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DistributionDayData_filter]
  or: [DistributionDayData_filter]
}

enum DistributionDayData_orderBy {
  id
  date
  timezone
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  distributed
  distributedUSD
}

type Factory {
  id: ID!
  owner: Bytes!
}

input Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Factory_filter]
  or: [Factory_filter]
}

enum Factory_orderBy {
  id
  owner
}

type Hypervisor {
  id: ID!
  owner: Bytes!
  stakingToken: Token!
  totalStakedAmount: BigInt
  rewardToken: Token!
  rewardPool: Bytes
  rewardPoolAmount: BigInt
  powerSwitch: Bytes
  bonusTokens: [Bytes!]
  vaultFactory: Factory
}

input Hypervisor_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  stakingToken: String
  stakingToken_not: String
  stakingToken_gt: String
  stakingToken_lt: String
  stakingToken_gte: String
  stakingToken_lte: String
  stakingToken_in: [String!]
  stakingToken_not_in: [String!]
  stakingToken_contains: String
  stakingToken_contains_nocase: String
  stakingToken_not_contains: String
  stakingToken_not_contains_nocase: String
  stakingToken_starts_with: String
  stakingToken_starts_with_nocase: String
  stakingToken_not_starts_with: String
  stakingToken_not_starts_with_nocase: String
  stakingToken_ends_with: String
  stakingToken_ends_with_nocase: String
  stakingToken_not_ends_with: String
  stakingToken_not_ends_with_nocase: String
  stakingToken_: Token_filter
  totalStakedAmount: BigInt
  totalStakedAmount_not: BigInt
  totalStakedAmount_gt: BigInt
  totalStakedAmount_lt: BigInt
  totalStakedAmount_gte: BigInt
  totalStakedAmount_lte: BigInt
  totalStakedAmount_in: [BigInt!]
  totalStakedAmount_not_in: [BigInt!]
  rewardToken: String
  rewardToken_not: String
  rewardToken_gt: String
  rewardToken_lt: String
  rewardToken_gte: String
  rewardToken_lte: String
  rewardToken_in: [String!]
  rewardToken_not_in: [String!]
  rewardToken_contains: String
  rewardToken_contains_nocase: String
  rewardToken_not_contains: String
  rewardToken_not_contains_nocase: String
  rewardToken_starts_with: String
  rewardToken_starts_with_nocase: String
  rewardToken_not_starts_with: String
  rewardToken_not_starts_with_nocase: String
  rewardToken_ends_with: String
  rewardToken_ends_with_nocase: String
  rewardToken_not_ends_with: String
  rewardToken_not_ends_with_nocase: String
  rewardToken_: Token_filter
  rewardPool: Bytes
  rewardPool_not: Bytes
  rewardPool_gt: Bytes
  rewardPool_lt: Bytes
  rewardPool_gte: Bytes
  rewardPool_lte: Bytes
  rewardPool_in: [Bytes!]
  rewardPool_not_in: [Bytes!]
  rewardPool_contains: Bytes
  rewardPool_not_contains: Bytes
  rewardPoolAmount: BigInt
  rewardPoolAmount_not: BigInt
  rewardPoolAmount_gt: BigInt
  rewardPoolAmount_lt: BigInt
  rewardPoolAmount_gte: BigInt
  rewardPoolAmount_lte: BigInt
  rewardPoolAmount_in: [BigInt!]
  rewardPoolAmount_not_in: [BigInt!]
  powerSwitch: Bytes
  powerSwitch_not: Bytes
  powerSwitch_gt: Bytes
  powerSwitch_lt: Bytes
  powerSwitch_gte: Bytes
  powerSwitch_lte: Bytes
  powerSwitch_in: [Bytes!]
  powerSwitch_not_in: [Bytes!]
  powerSwitch_contains: Bytes
  powerSwitch_not_contains: Bytes
  bonusTokens: [Bytes!]
  bonusTokens_not: [Bytes!]
  bonusTokens_contains: [Bytes!]
  bonusTokens_contains_nocase: [Bytes!]
  bonusTokens_not_contains: [Bytes!]
  bonusTokens_not_contains_nocase: [Bytes!]
  vaultFactory: String
  vaultFactory_not: String
  vaultFactory_gt: String
  vaultFactory_lt: String
  vaultFactory_gte: String
  vaultFactory_lte: String
  vaultFactory_in: [String!]
  vaultFactory_not_in: [String!]
  vaultFactory_contains: String
  vaultFactory_contains_nocase: String
  vaultFactory_not_contains: String
  vaultFactory_not_contains_nocase: String
  vaultFactory_starts_with: String
  vaultFactory_starts_with_nocase: String
  vaultFactory_not_starts_with: String
  vaultFactory_not_starts_with_nocase: String
  vaultFactory_ends_with: String
  vaultFactory_ends_with_nocase: String
  vaultFactory_not_ends_with: String
  vaultFactory_not_ends_with_nocase: String
  vaultFactory_: Factory_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Hypervisor_filter]
  or: [Hypervisor_filter]
}

enum Hypervisor_orderBy {
  id
  owner
  stakingToken
  stakingToken__id
  stakingToken__symbol
  stakingToken__name
  stakingToken__decimals
  stakingToken__totalSupply
  totalStakedAmount
  rewardToken
  rewardToken__id
  rewardToken__symbol
  rewardToken__name
  rewardToken__decimals
  rewardToken__totalSupply
  rewardPool
  rewardPoolAmount
  powerSwitch
  bonusTokens
  vaultFactory
  vaultFactory__id
  vaultFactory__owner
}

type MasterChef {
  id: ID!
  rewardToken: Token!
  rewardPerBlock: BigInt!
  totalAllocPoint: BigInt!
  pools(skip: Int = 0, first: Int = 100, orderBy: MasterChefPool_orderBy, orderDirection: OrderDirection, where: MasterChefPool_filter): [MasterChefPool!]!
}

type MasterChefPool {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  masterChef: MasterChef!
  poolId: BigInt!
  allocPoint: BigInt!
  lastRewardBlock: BigInt!
  stakeToken: Token!
  totalStaked: BigInt!
  accounts(skip: Int = 0, first: Int = 100, orderBy: MasterChefPoolAccount_orderBy, orderDirection: OrderDirection, where: MasterChefPoolAccount_filter): [MasterChefPoolAccount!]!
}

type MasterChefPoolAccount {
  id: ID!
  account: Account!
  masterChefPool: MasterChefPool!
  amount: BigInt!
}

input MasterChefPoolAccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  masterChefPool: String
  masterChefPool_not: String
  masterChefPool_gt: String
  masterChefPool_lt: String
  masterChefPool_gte: String
  masterChefPool_lte: String
  masterChefPool_in: [String!]
  masterChefPool_not_in: [String!]
  masterChefPool_contains: String
  masterChefPool_contains_nocase: String
  masterChefPool_not_contains: String
  masterChefPool_not_contains_nocase: String
  masterChefPool_starts_with: String
  masterChefPool_starts_with_nocase: String
  masterChefPool_not_starts_with: String
  masterChefPool_not_starts_with_nocase: String
  masterChefPool_ends_with: String
  masterChefPool_ends_with_nocase: String
  masterChefPool_not_ends_with: String
  masterChefPool_not_ends_with_nocase: String
  masterChefPool_: MasterChefPool_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChefPoolAccount_filter]
  or: [MasterChefPoolAccount_filter]
}

enum MasterChefPoolAccount_orderBy {
  id
  account
  account__id
  account__type
  account__gammaDeposited
  account__gammaEarnedRealized
  account__hypervisorCount
  masterChefPool
  masterChefPool__id
  masterChefPool__poolId
  masterChefPool__allocPoint
  masterChefPool__lastRewardBlock
  masterChefPool__totalStaked
  amount
}

input MasterChefPool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: UniswapV3Hypervisor_filter
  masterChef: String
  masterChef_not: String
  masterChef_gt: String
  masterChef_lt: String
  masterChef_gte: String
  masterChef_lte: String
  masterChef_in: [String!]
  masterChef_not_in: [String!]
  masterChef_contains: String
  masterChef_contains_nocase: String
  masterChef_not_contains: String
  masterChef_not_contains_nocase: String
  masterChef_starts_with: String
  masterChef_starts_with_nocase: String
  masterChef_not_starts_with: String
  masterChef_not_starts_with_nocase: String
  masterChef_ends_with: String
  masterChef_ends_with_nocase: String
  masterChef_not_ends_with: String
  masterChef_not_ends_with_nocase: String
  masterChef_: MasterChef_filter
  poolId: BigInt
  poolId_not: BigInt
  poolId_gt: BigInt
  poolId_lt: BigInt
  poolId_gte: BigInt
  poolId_lte: BigInt
  poolId_in: [BigInt!]
  poolId_not_in: [BigInt!]
  allocPoint: BigInt
  allocPoint_not: BigInt
  allocPoint_gt: BigInt
  allocPoint_lt: BigInt
  allocPoint_gte: BigInt
  allocPoint_lte: BigInt
  allocPoint_in: [BigInt!]
  allocPoint_not_in: [BigInt!]
  lastRewardBlock: BigInt
  lastRewardBlock_not: BigInt
  lastRewardBlock_gt: BigInt
  lastRewardBlock_lt: BigInt
  lastRewardBlock_gte: BigInt
  lastRewardBlock_lte: BigInt
  lastRewardBlock_in: [BigInt!]
  lastRewardBlock_not_in: [BigInt!]
  stakeToken: String
  stakeToken_not: String
  stakeToken_gt: String
  stakeToken_lt: String
  stakeToken_gte: String
  stakeToken_lte: String
  stakeToken_in: [String!]
  stakeToken_not_in: [String!]
  stakeToken_contains: String
  stakeToken_contains_nocase: String
  stakeToken_not_contains: String
  stakeToken_not_contains_nocase: String
  stakeToken_starts_with: String
  stakeToken_starts_with_nocase: String
  stakeToken_not_starts_with: String
  stakeToken_not_starts_with_nocase: String
  stakeToken_ends_with: String
  stakeToken_ends_with_nocase: String
  stakeToken_not_ends_with: String
  stakeToken_not_ends_with_nocase: String
  stakeToken_: Token_filter
  totalStaked: BigInt
  totalStaked_not: BigInt
  totalStaked_gt: BigInt
  totalStaked_lt: BigInt
  totalStaked_gte: BigInt
  totalStaked_lte: BigInt
  totalStaked_in: [BigInt!]
  totalStaked_not_in: [BigInt!]
  accounts_: MasterChefPoolAccount_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChefPool_filter]
  or: [MasterChefPool_filter]
}

enum MasterChefPool_orderBy {
  id
  hypervisor
  hypervisor__id
  hypervisor__version
  hypervisor__owner
  hypervisor__created
  hypervisor__symbol
  hypervisor__fee
  hypervisor__tick
  hypervisor__baseLower
  hypervisor__baseUpper
  hypervisor__baseLiquidity
  hypervisor__baseAmount0
  hypervisor__baseAmount1
  hypervisor__baseTokensOwed0
  hypervisor__baseTokensOwed1
  hypervisor__baseFeeGrowthInside0LastX128
  hypervisor__baseFeeGrowthInside1LastX128
  hypervisor__baseFeeGrowthInside0LastRebalanceX128
  hypervisor__baseFeeGrowthInside1LastRebalanceX128
  hypervisor__limitLower
  hypervisor__limitUpper
  hypervisor__limitLiquidity
  hypervisor__limitAmount0
  hypervisor__limitAmount1
  hypervisor__limitTokensOwed0
  hypervisor__limitTokensOwed1
  hypervisor__limitFeeGrowthInside0LastX128
  hypervisor__limitFeeGrowthInside1LastX128
  hypervisor__limitFeeGrowthInside0LastRebalanceX128
  hypervisor__limitFeeGrowthInside1LastRebalanceX128
  hypervisor__deposit0Max
  hypervisor__deposit1Max
  hypervisor__totalSupply
  hypervisor__maxTotalSupply
  hypervisor__grossFeesClaimed0
  hypervisor__grossFeesClaimed1
  hypervisor__grossFeesClaimedUSD
  hypervisor__protocolFeesCollected0
  hypervisor__protocolFeesCollected1
  hypervisor__protocolFeesCollectedUSD
  hypervisor__feesReinvested0
  hypervisor__feesReinvested1
  hypervisor__feesReinvestedUSD
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__pricePerShare
  hypervisor__accountCount
  hypervisor__lastUpdated
  masterChef
  masterChef__id
  masterChef__rewardPerBlock
  masterChef__totalAllocPoint
  poolId
  allocPoint
  lastRewardBlock
  stakeToken
  stakeToken__id
  stakeToken__symbol
  stakeToken__name
  stakeToken__decimals
  stakeToken__totalSupply
  totalStaked
  accounts
}

type MasterChefV2 {
  id: ID!
  rewardToken: Token!
  rewardPerSecond: BigInt!
  totalAllocPoint: BigInt!
  pools(skip: Int = 0, first: Int = 100, orderBy: MasterChefV2Pool_orderBy, orderDirection: OrderDirection, where: MasterChefV2Pool_filter): [MasterChefV2Pool!]!
}

type MasterChefV2Pool {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  masterChef: MasterChefV2!
  poolId: BigInt!
  allocPoint: BigInt!
  stakeToken: Token!
  totalStaked: BigInt!
  accSushiPerShare: BigInt!
  lastRewardTimestamp: BigInt!
  rewarderList: [String!]!
  rewarders(skip: Int = 0, first: Int = 100, orderBy: MasterChefV2RewarderPool_orderBy, orderDirection: OrderDirection, where: MasterChefV2RewarderPool_filter): [MasterChefV2RewarderPool!]!
  accounts(skip: Int = 0, first: Int = 100, orderBy: MasterChefV2PoolAccount_orderBy, orderDirection: OrderDirection, where: MasterChefV2PoolAccount_filter): [MasterChefV2PoolAccount!]!
}

type MasterChefV2PoolAccount {
  id: ID!
  account: Account!
  pool: MasterChefV2Pool!
  amount: BigInt!
}

input MasterChefV2PoolAccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: MasterChefV2Pool_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChefV2PoolAccount_filter]
  or: [MasterChefV2PoolAccount_filter]
}

enum MasterChefV2PoolAccount_orderBy {
  id
  account
  account__id
  account__type
  account__gammaDeposited
  account__gammaEarnedRealized
  account__hypervisorCount
  pool
  pool__id
  pool__poolId
  pool__allocPoint
  pool__totalStaked
  pool__accSushiPerShare
  pool__lastRewardTimestamp
  amount
}

input MasterChefV2Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: UniswapV3Hypervisor_filter
  masterChef: String
  masterChef_not: String
  masterChef_gt: String
  masterChef_lt: String
  masterChef_gte: String
  masterChef_lte: String
  masterChef_in: [String!]
  masterChef_not_in: [String!]
  masterChef_contains: String
  masterChef_contains_nocase: String
  masterChef_not_contains: String
  masterChef_not_contains_nocase: String
  masterChef_starts_with: String
  masterChef_starts_with_nocase: String
  masterChef_not_starts_with: String
  masterChef_not_starts_with_nocase: String
  masterChef_ends_with: String
  masterChef_ends_with_nocase: String
  masterChef_not_ends_with: String
  masterChef_not_ends_with_nocase: String
  masterChef_: MasterChefV2_filter
  poolId: BigInt
  poolId_not: BigInt
  poolId_gt: BigInt
  poolId_lt: BigInt
  poolId_gte: BigInt
  poolId_lte: BigInt
  poolId_in: [BigInt!]
  poolId_not_in: [BigInt!]
  allocPoint: BigInt
  allocPoint_not: BigInt
  allocPoint_gt: BigInt
  allocPoint_lt: BigInt
  allocPoint_gte: BigInt
  allocPoint_lte: BigInt
  allocPoint_in: [BigInt!]
  allocPoint_not_in: [BigInt!]
  stakeToken: String
  stakeToken_not: String
  stakeToken_gt: String
  stakeToken_lt: String
  stakeToken_gte: String
  stakeToken_lte: String
  stakeToken_in: [String!]
  stakeToken_not_in: [String!]
  stakeToken_contains: String
  stakeToken_contains_nocase: String
  stakeToken_not_contains: String
  stakeToken_not_contains_nocase: String
  stakeToken_starts_with: String
  stakeToken_starts_with_nocase: String
  stakeToken_not_starts_with: String
  stakeToken_not_starts_with_nocase: String
  stakeToken_ends_with: String
  stakeToken_ends_with_nocase: String
  stakeToken_not_ends_with: String
  stakeToken_not_ends_with_nocase: String
  stakeToken_: Token_filter
  totalStaked: BigInt
  totalStaked_not: BigInt
  totalStaked_gt: BigInt
  totalStaked_lt: BigInt
  totalStaked_gte: BigInt
  totalStaked_lte: BigInt
  totalStaked_in: [BigInt!]
  totalStaked_not_in: [BigInt!]
  accSushiPerShare: BigInt
  accSushiPerShare_not: BigInt
  accSushiPerShare_gt: BigInt
  accSushiPerShare_lt: BigInt
  accSushiPerShare_gte: BigInt
  accSushiPerShare_lte: BigInt
  accSushiPerShare_in: [BigInt!]
  accSushiPerShare_not_in: [BigInt!]
  lastRewardTimestamp: BigInt
  lastRewardTimestamp_not: BigInt
  lastRewardTimestamp_gt: BigInt
  lastRewardTimestamp_lt: BigInt
  lastRewardTimestamp_gte: BigInt
  lastRewardTimestamp_lte: BigInt
  lastRewardTimestamp_in: [BigInt!]
  lastRewardTimestamp_not_in: [BigInt!]
  rewarderList: [String!]
  rewarderList_not: [String!]
  rewarderList_contains: [String!]
  rewarderList_contains_nocase: [String!]
  rewarderList_not_contains: [String!]
  rewarderList_not_contains_nocase: [String!]
  rewarders_: MasterChefV2RewarderPool_filter
  accounts_: MasterChefV2PoolAccount_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChefV2Pool_filter]
  or: [MasterChefV2Pool_filter]
}

enum MasterChefV2Pool_orderBy {
  id
  hypervisor
  hypervisor__id
  hypervisor__version
  hypervisor__owner
  hypervisor__created
  hypervisor__symbol
  hypervisor__fee
  hypervisor__tick
  hypervisor__baseLower
  hypervisor__baseUpper
  hypervisor__baseLiquidity
  hypervisor__baseAmount0
  hypervisor__baseAmount1
  hypervisor__baseTokensOwed0
  hypervisor__baseTokensOwed1
  hypervisor__baseFeeGrowthInside0LastX128
  hypervisor__baseFeeGrowthInside1LastX128
  hypervisor__baseFeeGrowthInside0LastRebalanceX128
  hypervisor__baseFeeGrowthInside1LastRebalanceX128
  hypervisor__limitLower
  hypervisor__limitUpper
  hypervisor__limitLiquidity
  hypervisor__limitAmount0
  hypervisor__limitAmount1
  hypervisor__limitTokensOwed0
  hypervisor__limitTokensOwed1
  hypervisor__limitFeeGrowthInside0LastX128
  hypervisor__limitFeeGrowthInside1LastX128
  hypervisor__limitFeeGrowthInside0LastRebalanceX128
  hypervisor__limitFeeGrowthInside1LastRebalanceX128
  hypervisor__deposit0Max
  hypervisor__deposit1Max
  hypervisor__totalSupply
  hypervisor__maxTotalSupply
  hypervisor__grossFeesClaimed0
  hypervisor__grossFeesClaimed1
  hypervisor__grossFeesClaimedUSD
  hypervisor__protocolFeesCollected0
  hypervisor__protocolFeesCollected1
  hypervisor__protocolFeesCollectedUSD
  hypervisor__feesReinvested0
  hypervisor__feesReinvested1
  hypervisor__feesReinvestedUSD
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__pricePerShare
  hypervisor__accountCount
  hypervisor__lastUpdated
  masterChef
  masterChef__id
  masterChef__rewardPerSecond
  masterChef__totalAllocPoint
  poolId
  allocPoint
  stakeToken
  stakeToken__id
  stakeToken__symbol
  stakeToken__name
  stakeToken__decimals
  stakeToken__totalSupply
  totalStaked
  accSushiPerShare
  lastRewardTimestamp
  rewarderList
  rewarders
  accounts
}

type MasterChefV2Rewarder {
  id: ID!
  masterChef: MasterChefV2!
  rewardToken: Token!
  rewardPerSecond: BigInt!
  totalAllocPoint: BigInt!
  lastRewardTimestamp: BigInt!
  pools(skip: Int = 0, first: Int = 100, orderBy: MasterChefV2RewarderPool_orderBy, orderDirection: OrderDirection, where: MasterChefV2RewarderPool_filter): [MasterChefV2RewarderPool!]!
}

type MasterChefV2RewarderPool {
  id: ID!
  rewarder: MasterChefV2Rewarder!
  pool: MasterChefV2Pool!
  allocPoint: BigInt!
  accounts(skip: Int = 0, first: Int = 100, orderBy: MasterChefV2RewarderPoolAccount_orderBy, orderDirection: OrderDirection, where: MasterChefV2RewarderPoolAccount_filter): [MasterChefV2RewarderPoolAccount!]!
}

type MasterChefV2RewarderPoolAccount {
  id: ID!
  account: Account!
  rewarderPool: MasterChefV2RewarderPool!
  amount: BigInt!
}

input MasterChefV2RewarderPoolAccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  rewarderPool: String
  rewarderPool_not: String
  rewarderPool_gt: String
  rewarderPool_lt: String
  rewarderPool_gte: String
  rewarderPool_lte: String
  rewarderPool_in: [String!]
  rewarderPool_not_in: [String!]
  rewarderPool_contains: String
  rewarderPool_contains_nocase: String
  rewarderPool_not_contains: String
  rewarderPool_not_contains_nocase: String
  rewarderPool_starts_with: String
  rewarderPool_starts_with_nocase: String
  rewarderPool_not_starts_with: String
  rewarderPool_not_starts_with_nocase: String
  rewarderPool_ends_with: String
  rewarderPool_ends_with_nocase: String
  rewarderPool_not_ends_with: String
  rewarderPool_not_ends_with_nocase: String
  rewarderPool_: MasterChefV2RewarderPool_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChefV2RewarderPoolAccount_filter]
  or: [MasterChefV2RewarderPoolAccount_filter]
}

enum MasterChefV2RewarderPoolAccount_orderBy {
  id
  account
  account__id
  account__type
  account__gammaDeposited
  account__gammaEarnedRealized
  account__hypervisorCount
  rewarderPool
  rewarderPool__id
  rewarderPool__allocPoint
  amount
}

input MasterChefV2RewarderPool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rewarder: String
  rewarder_not: String
  rewarder_gt: String
  rewarder_lt: String
  rewarder_gte: String
  rewarder_lte: String
  rewarder_in: [String!]
  rewarder_not_in: [String!]
  rewarder_contains: String
  rewarder_contains_nocase: String
  rewarder_not_contains: String
  rewarder_not_contains_nocase: String
  rewarder_starts_with: String
  rewarder_starts_with_nocase: String
  rewarder_not_starts_with: String
  rewarder_not_starts_with_nocase: String
  rewarder_ends_with: String
  rewarder_ends_with_nocase: String
  rewarder_not_ends_with: String
  rewarder_not_ends_with_nocase: String
  rewarder_: MasterChefV2Rewarder_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: MasterChefV2Pool_filter
  allocPoint: BigInt
  allocPoint_not: BigInt
  allocPoint_gt: BigInt
  allocPoint_lt: BigInt
  allocPoint_gte: BigInt
  allocPoint_lte: BigInt
  allocPoint_in: [BigInt!]
  allocPoint_not_in: [BigInt!]
  accounts_: MasterChefV2RewarderPoolAccount_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChefV2RewarderPool_filter]
  or: [MasterChefV2RewarderPool_filter]
}

enum MasterChefV2RewarderPool_orderBy {
  id
  rewarder
  rewarder__id
  rewarder__rewardPerSecond
  rewarder__totalAllocPoint
  rewarder__lastRewardTimestamp
  pool
  pool__id
  pool__poolId
  pool__allocPoint
  pool__totalStaked
  pool__accSushiPerShare
  pool__lastRewardTimestamp
  allocPoint
  accounts
}

input MasterChefV2Rewarder_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  masterChef: String
  masterChef_not: String
  masterChef_gt: String
  masterChef_lt: String
  masterChef_gte: String
  masterChef_lte: String
  masterChef_in: [String!]
  masterChef_not_in: [String!]
  masterChef_contains: String
  masterChef_contains_nocase: String
  masterChef_not_contains: String
  masterChef_not_contains_nocase: String
  masterChef_starts_with: String
  masterChef_starts_with_nocase: String
  masterChef_not_starts_with: String
  masterChef_not_starts_with_nocase: String
  masterChef_ends_with: String
  masterChef_ends_with_nocase: String
  masterChef_not_ends_with: String
  masterChef_not_ends_with_nocase: String
  masterChef_: MasterChefV2_filter
  rewardToken: String
  rewardToken_not: String
  rewardToken_gt: String
  rewardToken_lt: String
  rewardToken_gte: String
  rewardToken_lte: String
  rewardToken_in: [String!]
  rewardToken_not_in: [String!]
  rewardToken_contains: String
  rewardToken_contains_nocase: String
  rewardToken_not_contains: String
  rewardToken_not_contains_nocase: String
  rewardToken_starts_with: String
  rewardToken_starts_with_nocase: String
  rewardToken_not_starts_with: String
  rewardToken_not_starts_with_nocase: String
  rewardToken_ends_with: String
  rewardToken_ends_with_nocase: String
  rewardToken_not_ends_with: String
  rewardToken_not_ends_with_nocase: String
  rewardToken_: Token_filter
  rewardPerSecond: BigInt
  rewardPerSecond_not: BigInt
  rewardPerSecond_gt: BigInt
  rewardPerSecond_lt: BigInt
  rewardPerSecond_gte: BigInt
  rewardPerSecond_lte: BigInt
  rewardPerSecond_in: [BigInt!]
  rewardPerSecond_not_in: [BigInt!]
  totalAllocPoint: BigInt
  totalAllocPoint_not: BigInt
  totalAllocPoint_gt: BigInt
  totalAllocPoint_lt: BigInt
  totalAllocPoint_gte: BigInt
  totalAllocPoint_lte: BigInt
  totalAllocPoint_in: [BigInt!]
  totalAllocPoint_not_in: [BigInt!]
  lastRewardTimestamp: BigInt
  lastRewardTimestamp_not: BigInt
  lastRewardTimestamp_gt: BigInt
  lastRewardTimestamp_lt: BigInt
  lastRewardTimestamp_gte: BigInt
  lastRewardTimestamp_lte: BigInt
  lastRewardTimestamp_in: [BigInt!]
  lastRewardTimestamp_not_in: [BigInt!]
  pools_: MasterChefV2RewarderPool_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChefV2Rewarder_filter]
  or: [MasterChefV2Rewarder_filter]
}

enum MasterChefV2Rewarder_orderBy {
  id
  masterChef
  masterChef__id
  masterChef__rewardPerSecond
  masterChef__totalAllocPoint
  rewardToken
  rewardToken__id
  rewardToken__symbol
  rewardToken__name
  rewardToken__decimals
  rewardToken__totalSupply
  rewardPerSecond
  totalAllocPoint
  lastRewardTimestamp
  pools
}

input MasterChefV2_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rewardToken: String
  rewardToken_not: String
  rewardToken_gt: String
  rewardToken_lt: String
  rewardToken_gte: String
  rewardToken_lte: String
  rewardToken_in: [String!]
  rewardToken_not_in: [String!]
  rewardToken_contains: String
  rewardToken_contains_nocase: String
  rewardToken_not_contains: String
  rewardToken_not_contains_nocase: String
  rewardToken_starts_with: String
  rewardToken_starts_with_nocase: String
  rewardToken_not_starts_with: String
  rewardToken_not_starts_with_nocase: String
  rewardToken_ends_with: String
  rewardToken_ends_with_nocase: String
  rewardToken_not_ends_with: String
  rewardToken_not_ends_with_nocase: String
  rewardToken_: Token_filter
  rewardPerSecond: BigInt
  rewardPerSecond_not: BigInt
  rewardPerSecond_gt: BigInt
  rewardPerSecond_lt: BigInt
  rewardPerSecond_gte: BigInt
  rewardPerSecond_lte: BigInt
  rewardPerSecond_in: [BigInt!]
  rewardPerSecond_not_in: [BigInt!]
  totalAllocPoint: BigInt
  totalAllocPoint_not: BigInt
  totalAllocPoint_gt: BigInt
  totalAllocPoint_lt: BigInt
  totalAllocPoint_gte: BigInt
  totalAllocPoint_lte: BigInt
  totalAllocPoint_in: [BigInt!]
  totalAllocPoint_not_in: [BigInt!]
  pools_: MasterChefV2Pool_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChefV2_filter]
  or: [MasterChefV2_filter]
}

enum MasterChefV2_orderBy {
  id
  rewardToken
  rewardToken__id
  rewardToken__symbol
  rewardToken__name
  rewardToken__decimals
  rewardToken__totalSupply
  rewardPerSecond
  totalAllocPoint
  pools
}

input MasterChef_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rewardToken: String
  rewardToken_not: String
  rewardToken_gt: String
  rewardToken_lt: String
  rewardToken_gte: String
  rewardToken_lte: String
  rewardToken_in: [String!]
  rewardToken_not_in: [String!]
  rewardToken_contains: String
  rewardToken_contains_nocase: String
  rewardToken_not_contains: String
  rewardToken_not_contains_nocase: String
  rewardToken_starts_with: String
  rewardToken_starts_with_nocase: String
  rewardToken_not_starts_with: String
  rewardToken_not_starts_with_nocase: String
  rewardToken_ends_with: String
  rewardToken_ends_with_nocase: String
  rewardToken_not_ends_with: String
  rewardToken_not_ends_with_nocase: String
  rewardToken_: Token_filter
  rewardPerBlock: BigInt
  rewardPerBlock_not: BigInt
  rewardPerBlock_gt: BigInt
  rewardPerBlock_lt: BigInt
  rewardPerBlock_gte: BigInt
  rewardPerBlock_lte: BigInt
  rewardPerBlock_in: [BigInt!]
  rewardPerBlock_not_in: [BigInt!]
  totalAllocPoint: BigInt
  totalAllocPoint_not: BigInt
  totalAllocPoint_gt: BigInt
  totalAllocPoint_lt: BigInt
  totalAllocPoint_gte: BigInt
  totalAllocPoint_lte: BigInt
  totalAllocPoint_in: [BigInt!]
  totalAllocPoint_not_in: [BigInt!]
  pools_: MasterChefPool_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChef_filter]
  or: [MasterChef_filter]
}

enum MasterChef_orderBy {
  id
  rewardToken
  rewardToken__id
  rewardToken__symbol
  rewardToken__name
  rewardToken__decimals
  rewardToken__totalSupply
  rewardPerBlock
  totalAllocPoint
  pools
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Protocol {
  id: ID!
  name: String!
}

type ProtocolDistribution {
  """Address of distributed token"""
  id: ID!

  """Cumulative distributed amount"""
  distributed: BigInt!

  """Cumulative distributed amount in USD at the time of distribution"""
  distributedUSD: BigDecimal!
}

input ProtocolDistribution_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  distributed: BigInt
  distributed_not: BigInt
  distributed_gt: BigInt
  distributed_lt: BigInt
  distributed_gte: BigInt
  distributed_lte: BigInt
  distributed_in: [BigInt!]
  distributed_not_in: [BigInt!]
  distributedUSD: BigDecimal
  distributedUSD_not: BigDecimal
  distributedUSD_gt: BigDecimal
  distributedUSD_lt: BigDecimal
  distributedUSD_gte: BigDecimal
  distributedUSD_lte: BigDecimal
  distributedUSD_in: [BigDecimal!]
  distributedUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProtocolDistribution_filter]
  or: [ProtocolDistribution_filter]
}

enum ProtocolDistribution_orderBy {
  id
  distributed
  distributedUSD
}

input Protocol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Protocol_filter]
  or: [Protocol_filter]
}

enum Protocol_orderBy {
  id
  name
}

type Query {
  protocol(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  protocolDistribution(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolDistribution
  protocolDistributions(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolDistribution_orderBy
    orderDirection: OrderDirection
    where: ProtocolDistribution_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolDistribution!]!
  rewardHypervisor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardHypervisor
  rewardHypervisors(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardHypervisor_orderBy
    orderDirection: OrderDirection
    where: RewardHypervisor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardHypervisor!]!
  rewardHypervisorShare(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardHypervisorShare
  rewardHypervisorShares(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardHypervisorShare_orderBy
    orderDirection: OrderDirection
    where: RewardHypervisorShare_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardHypervisorShare!]!
  rewardHypervisorTx(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardHypervisorTx
  rewardHypervisorTxes(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardHypervisorTx_orderBy
    orderDirection: OrderDirection
    where: RewardHypervisorTx_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardHypervisorTx!]!
  distributionDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DistributionDayData
  distributionDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: DistributionDayData_orderBy
    orderDirection: OrderDirection
    where: DistributionDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DistributionDayData!]!
  rewardHypervisorDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardHypervisorDayData
  rewardHypervisorDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardHypervisorDayData_orderBy
    orderDirection: OrderDirection
    where: RewardHypervisorDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardHypervisorDayData!]!
  factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Factory
  factories(
    skip: Int = 0
    first: Int = 100
    orderBy: Factory_orderBy
    orderDirection: OrderDirection
    where: Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Factory!]!
  hypervisor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Hypervisor
  hypervisors(
    skip: Int = 0
    first: Int = 100
    orderBy: Hypervisor_orderBy
    orderDirection: OrderDirection
    where: Hypervisor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Hypervisor!]!
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  visorTemplate(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VisorTemplate
  visorTemplates(
    skip: Int = 0
    first: Int = 100
    orderBy: VisorTemplate_orderBy
    orderDirection: OrderDirection
    where: VisorTemplate_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VisorTemplate!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  stakedToken(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StakedToken
  stakedTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: StakedToken_orderBy
    orderDirection: OrderDirection
    where: StakedToken_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StakedToken!]!
  rewardedToken(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardedToken
  rewardedTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardedToken_orderBy
    orderDirection: OrderDirection
    where: RewardedToken_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardedToken!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  uniswapV3Pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3Pool
  uniswapV3Pools(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3Pool_orderBy
    orderDirection: OrderDirection
    where: UniswapV3Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3Pool!]!
  uniswapV3HypervisorFactory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3HypervisorFactory
  uniswapV3HypervisorFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3HypervisorFactory_orderBy
    orderDirection: OrderDirection
    where: UniswapV3HypervisorFactory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3HypervisorFactory!]!
  uniswapV3Hypervisor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3Hypervisor
  uniswapV3Hypervisors(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3Hypervisor_orderBy
    orderDirection: OrderDirection
    where: UniswapV3Hypervisor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3Hypervisor!]!
  uniswapV3Deposit(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3Deposit
  uniswapV3Deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3Deposit_orderBy
    orderDirection: OrderDirection
    where: UniswapV3Deposit_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3Deposit!]!
  uniswapV3Rebalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3Rebalance
  uniswapV3Rebalances(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3Rebalance_orderBy
    orderDirection: OrderDirection
    where: UniswapV3Rebalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3Rebalance!]!
  uniswapV3Withdraw(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3Withdraw
  uniswapV3Withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3Withdraw_orderBy
    orderDirection: OrderDirection
    where: UniswapV3Withdraw_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3Withdraw!]!
  uniswapV3FeeUpdate(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3FeeUpdate
  uniswapV3FeeUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3FeeUpdate_orderBy
    orderDirection: OrderDirection
    where: UniswapV3FeeUpdate_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3FeeUpdate!]!
  uniswapV3HypervisorDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3HypervisorDayData
  uniswapV3HypervisorDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3HypervisorDayData_orderBy
    orderDirection: OrderDirection
    where: UniswapV3HypervisorDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3HypervisorDayData!]!
  uniswapV3HypervisorShare(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3HypervisorShare
  uniswapV3HypervisorShares(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3HypervisorShare_orderBy
    orderDirection: OrderDirection
    where: UniswapV3HypervisorShare_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3HypervisorShare!]!
  uniswapV3HypervisorConversion(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3HypervisorConversion
  uniswapV3HypervisorConversions(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3HypervisorConversion_orderBy
    orderDirection: OrderDirection
    where: UniswapV3HypervisorConversion_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3HypervisorConversion!]!
  masterChef(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChef
  masterChefs(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChef_orderBy
    orderDirection: OrderDirection
    where: MasterChef_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChef!]!
  masterChefPool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefPool
  masterChefPools(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefPool_orderBy
    orderDirection: OrderDirection
    where: MasterChefPool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefPool!]!
  masterChefPoolAccount(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefPoolAccount
  masterChefPoolAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefPoolAccount_orderBy
    orderDirection: OrderDirection
    where: MasterChefPoolAccount_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefPoolAccount!]!
  masterChefV2(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2
  masterChefV2S(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2!]!
  masterChefV2Pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2Pool
  masterChefV2Pools(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2Pool_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2Pool!]!
  masterChefV2Rewarder(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2Rewarder
  masterChefV2Rewarders(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2Rewarder_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2Rewarder_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2Rewarder!]!
  masterChefV2RewarderPool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2RewarderPool
  masterChefV2RewarderPools(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2RewarderPool_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2RewarderPool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2RewarderPool!]!
  masterChefV2PoolAccount(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2PoolAccount
  masterChefV2PoolAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2PoolAccount_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2PoolAccount_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2PoolAccount!]!
  masterChefV2RewarderPoolAccount(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2RewarderPoolAccount
  masterChefV2RewarderPoolAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2RewarderPoolAccount_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2RewarderPoolAccount_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2RewarderPoolAccount!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RewardHypervisor {
  id: ID!

  """Total GAMMA staked in the reward hypervisor"""
  totalGamma: BigInt!

  """Total supply of XGAMMA"""
  totalSupply: BigInt!

  """XGAMMA shares held by stakers"""
  shares(skip: Int = 0, first: Int = 100, orderBy: RewardHypervisorShare_orderBy, orderDirection: OrderDirection, where: RewardHypervisorShare_filter): [RewardHypervisorShare!]!
}

type RewardHypervisorDayData {
  id: ID!
  date: BigInt!
  timezone: String!
  totalGamma: BigInt!
  totalSupply: BigInt!
}

input RewardHypervisorDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  timezone: String
  timezone_not: String
  timezone_gt: String
  timezone_lt: String
  timezone_gte: String
  timezone_lte: String
  timezone_in: [String!]
  timezone_not_in: [String!]
  timezone_contains: String
  timezone_contains_nocase: String
  timezone_not_contains: String
  timezone_not_contains_nocase: String
  timezone_starts_with: String
  timezone_starts_with_nocase: String
  timezone_not_starts_with: String
  timezone_not_starts_with_nocase: String
  timezone_ends_with: String
  timezone_ends_with_nocase: String
  timezone_not_ends_with: String
  timezone_not_ends_with_nocase: String
  totalGamma: BigInt
  totalGamma_not: BigInt
  totalGamma_gt: BigInt
  totalGamma_lt: BigInt
  totalGamma_gte: BigInt
  totalGamma_lte: BigInt
  totalGamma_in: [BigInt!]
  totalGamma_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RewardHypervisorDayData_filter]
  or: [RewardHypervisorDayData_filter]
}

enum RewardHypervisorDayData_orderBy {
  id
  date
  timezone
  totalGamma
  totalSupply
}

type RewardHypervisorShare {
  id: ID!
  account: Account!
  rewardHypervisor: RewardHypervisor!
  shares: BigInt!
}

input RewardHypervisorShare_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  rewardHypervisor: String
  rewardHypervisor_not: String
  rewardHypervisor_gt: String
  rewardHypervisor_lt: String
  rewardHypervisor_gte: String
  rewardHypervisor_lte: String
  rewardHypervisor_in: [String!]
  rewardHypervisor_not_in: [String!]
  rewardHypervisor_contains: String
  rewardHypervisor_contains_nocase: String
  rewardHypervisor_not_contains: String
  rewardHypervisor_not_contains_nocase: String
  rewardHypervisor_starts_with: String
  rewardHypervisor_starts_with_nocase: String
  rewardHypervisor_not_starts_with: String
  rewardHypervisor_not_starts_with_nocase: String
  rewardHypervisor_ends_with: String
  rewardHypervisor_ends_with_nocase: String
  rewardHypervisor_not_ends_with: String
  rewardHypervisor_not_ends_with_nocase: String
  rewardHypervisor_: RewardHypervisor_filter
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RewardHypervisorShare_filter]
  or: [RewardHypervisorShare_filter]
}

enum RewardHypervisorShare_orderBy {
  id
  account
  account__id
  account__type
  account__gammaDeposited
  account__gammaEarnedRealized
  account__hypervisorCount
  rewardHypervisor
  rewardHypervisor__id
  rewardHypervisor__totalGamma
  rewardHypervisor__totalSupply
  shares
}

type RewardHypervisorTx {
  id: ID!
  block: BigInt!
  timestamp: BigInt!

  """stake or unstake"""
  action: String!
  account: Account!
  gammaAmount: BigInt!
  xgammaAmount: BigInt!
  xgammaAmountBefore: BigInt!
  xgammaAmountAfter: BigInt!
  xgammaSupplyBefore: BigInt!
  xgammaSupplyAfter: BigInt!
}

input RewardHypervisorTx_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  action: String
  action_not: String
  action_gt: String
  action_lt: String
  action_gte: String
  action_lte: String
  action_in: [String!]
  action_not_in: [String!]
  action_contains: String
  action_contains_nocase: String
  action_not_contains: String
  action_not_contains_nocase: String
  action_starts_with: String
  action_starts_with_nocase: String
  action_not_starts_with: String
  action_not_starts_with_nocase: String
  action_ends_with: String
  action_ends_with_nocase: String
  action_not_ends_with: String
  action_not_ends_with_nocase: String
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  gammaAmount: BigInt
  gammaAmount_not: BigInt
  gammaAmount_gt: BigInt
  gammaAmount_lt: BigInt
  gammaAmount_gte: BigInt
  gammaAmount_lte: BigInt
  gammaAmount_in: [BigInt!]
  gammaAmount_not_in: [BigInt!]
  xgammaAmount: BigInt
  xgammaAmount_not: BigInt
  xgammaAmount_gt: BigInt
  xgammaAmount_lt: BigInt
  xgammaAmount_gte: BigInt
  xgammaAmount_lte: BigInt
  xgammaAmount_in: [BigInt!]
  xgammaAmount_not_in: [BigInt!]
  xgammaAmountBefore: BigInt
  xgammaAmountBefore_not: BigInt
  xgammaAmountBefore_gt: BigInt
  xgammaAmountBefore_lt: BigInt
  xgammaAmountBefore_gte: BigInt
  xgammaAmountBefore_lte: BigInt
  xgammaAmountBefore_in: [BigInt!]
  xgammaAmountBefore_not_in: [BigInt!]
  xgammaAmountAfter: BigInt
  xgammaAmountAfter_not: BigInt
  xgammaAmountAfter_gt: BigInt
  xgammaAmountAfter_lt: BigInt
  xgammaAmountAfter_gte: BigInt
  xgammaAmountAfter_lte: BigInt
  xgammaAmountAfter_in: [BigInt!]
  xgammaAmountAfter_not_in: [BigInt!]
  xgammaSupplyBefore: BigInt
  xgammaSupplyBefore_not: BigInt
  xgammaSupplyBefore_gt: BigInt
  xgammaSupplyBefore_lt: BigInt
  xgammaSupplyBefore_gte: BigInt
  xgammaSupplyBefore_lte: BigInt
  xgammaSupplyBefore_in: [BigInt!]
  xgammaSupplyBefore_not_in: [BigInt!]
  xgammaSupplyAfter: BigInt
  xgammaSupplyAfter_not: BigInt
  xgammaSupplyAfter_gt: BigInt
  xgammaSupplyAfter_lt: BigInt
  xgammaSupplyAfter_gte: BigInt
  xgammaSupplyAfter_lte: BigInt
  xgammaSupplyAfter_in: [BigInt!]
  xgammaSupplyAfter_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RewardHypervisorTx_filter]
  or: [RewardHypervisorTx_filter]
}

enum RewardHypervisorTx_orderBy {
  id
  block
  timestamp
  action
  account
  account__id
  account__type
  account__gammaDeposited
  account__gammaEarnedRealized
  account__hypervisorCount
  gammaAmount
  xgammaAmount
  xgammaAmountBefore
  xgammaAmountAfter
  xgammaSupplyBefore
  xgammaSupplyAfter
}

input RewardHypervisor_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalGamma: BigInt
  totalGamma_not: BigInt
  totalGamma_gt: BigInt
  totalGamma_lt: BigInt
  totalGamma_gte: BigInt
  totalGamma_lte: BigInt
  totalGamma_in: [BigInt!]
  totalGamma_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  shares_: RewardHypervisorShare_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RewardHypervisor_filter]
  or: [RewardHypervisor_filter]
}

enum RewardHypervisor_orderBy {
  id
  totalGamma
  totalSupply
  shares
}

type RewardedToken {
  id: ID!
  token: Token!
  account: Account!
  amount: BigInt!
}

input RewardedToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RewardedToken_filter]
  or: [RewardedToken_filter]
}

enum RewardedToken_orderBy {
  id
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  account
  account__id
  account__type
  account__gammaDeposited
  account__gammaEarnedRealized
  account__hypervisorCount
  amount
}

type StakedToken {
  id: ID!
  token: Token!
  account: Account!
  amount: BigInt!
}

input StakedToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [StakedToken_filter]
  or: [StakedToken_filter]
}

enum StakedToken_orderBy {
  id
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  account
  account__id
  account__type
  account__gammaDeposited
  account__gammaEarnedRealized
  account__hypervisorCount
  amount
}

type Subscription {
  protocol(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  protocolDistribution(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolDistribution
  protocolDistributions(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolDistribution_orderBy
    orderDirection: OrderDirection
    where: ProtocolDistribution_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolDistribution!]!
  rewardHypervisor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardHypervisor
  rewardHypervisors(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardHypervisor_orderBy
    orderDirection: OrderDirection
    where: RewardHypervisor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardHypervisor!]!
  rewardHypervisorShare(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardHypervisorShare
  rewardHypervisorShares(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardHypervisorShare_orderBy
    orderDirection: OrderDirection
    where: RewardHypervisorShare_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardHypervisorShare!]!
  rewardHypervisorTx(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardHypervisorTx
  rewardHypervisorTxes(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardHypervisorTx_orderBy
    orderDirection: OrderDirection
    where: RewardHypervisorTx_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardHypervisorTx!]!
  distributionDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DistributionDayData
  distributionDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: DistributionDayData_orderBy
    orderDirection: OrderDirection
    where: DistributionDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DistributionDayData!]!
  rewardHypervisorDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardHypervisorDayData
  rewardHypervisorDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardHypervisorDayData_orderBy
    orderDirection: OrderDirection
    where: RewardHypervisorDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardHypervisorDayData!]!
  factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Factory
  factories(
    skip: Int = 0
    first: Int = 100
    orderBy: Factory_orderBy
    orderDirection: OrderDirection
    where: Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Factory!]!
  hypervisor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Hypervisor
  hypervisors(
    skip: Int = 0
    first: Int = 100
    orderBy: Hypervisor_orderBy
    orderDirection: OrderDirection
    where: Hypervisor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Hypervisor!]!
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  visorTemplate(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VisorTemplate
  visorTemplates(
    skip: Int = 0
    first: Int = 100
    orderBy: VisorTemplate_orderBy
    orderDirection: OrderDirection
    where: VisorTemplate_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VisorTemplate!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  stakedToken(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StakedToken
  stakedTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: StakedToken_orderBy
    orderDirection: OrderDirection
    where: StakedToken_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StakedToken!]!
  rewardedToken(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardedToken
  rewardedTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardedToken_orderBy
    orderDirection: OrderDirection
    where: RewardedToken_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardedToken!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  uniswapV3Pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3Pool
  uniswapV3Pools(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3Pool_orderBy
    orderDirection: OrderDirection
    where: UniswapV3Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3Pool!]!
  uniswapV3HypervisorFactory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3HypervisorFactory
  uniswapV3HypervisorFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3HypervisorFactory_orderBy
    orderDirection: OrderDirection
    where: UniswapV3HypervisorFactory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3HypervisorFactory!]!
  uniswapV3Hypervisor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3Hypervisor
  uniswapV3Hypervisors(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3Hypervisor_orderBy
    orderDirection: OrderDirection
    where: UniswapV3Hypervisor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3Hypervisor!]!
  uniswapV3Deposit(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3Deposit
  uniswapV3Deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3Deposit_orderBy
    orderDirection: OrderDirection
    where: UniswapV3Deposit_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3Deposit!]!
  uniswapV3Rebalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3Rebalance
  uniswapV3Rebalances(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3Rebalance_orderBy
    orderDirection: OrderDirection
    where: UniswapV3Rebalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3Rebalance!]!
  uniswapV3Withdraw(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3Withdraw
  uniswapV3Withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3Withdraw_orderBy
    orderDirection: OrderDirection
    where: UniswapV3Withdraw_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3Withdraw!]!
  uniswapV3FeeUpdate(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3FeeUpdate
  uniswapV3FeeUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3FeeUpdate_orderBy
    orderDirection: OrderDirection
    where: UniswapV3FeeUpdate_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3FeeUpdate!]!
  uniswapV3HypervisorDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3HypervisorDayData
  uniswapV3HypervisorDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3HypervisorDayData_orderBy
    orderDirection: OrderDirection
    where: UniswapV3HypervisorDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3HypervisorDayData!]!
  uniswapV3HypervisorShare(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3HypervisorShare
  uniswapV3HypervisorShares(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3HypervisorShare_orderBy
    orderDirection: OrderDirection
    where: UniswapV3HypervisorShare_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3HypervisorShare!]!
  uniswapV3HypervisorConversion(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapV3HypervisorConversion
  uniswapV3HypervisorConversions(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapV3HypervisorConversion_orderBy
    orderDirection: OrderDirection
    where: UniswapV3HypervisorConversion_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapV3HypervisorConversion!]!
  masterChef(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChef
  masterChefs(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChef_orderBy
    orderDirection: OrderDirection
    where: MasterChef_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChef!]!
  masterChefPool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefPool
  masterChefPools(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefPool_orderBy
    orderDirection: OrderDirection
    where: MasterChefPool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefPool!]!
  masterChefPoolAccount(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefPoolAccount
  masterChefPoolAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefPoolAccount_orderBy
    orderDirection: OrderDirection
    where: MasterChefPoolAccount_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefPoolAccount!]!
  masterChefV2(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2
  masterChefV2S(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2!]!
  masterChefV2Pool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2Pool
  masterChefV2Pools(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2Pool_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2Pool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2Pool!]!
  masterChefV2Rewarder(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2Rewarder
  masterChefV2Rewarders(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2Rewarder_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2Rewarder_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2Rewarder!]!
  masterChefV2RewarderPool(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2RewarderPool
  masterChefV2RewarderPools(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2RewarderPool_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2RewarderPool_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2RewarderPool!]!
  masterChefV2PoolAccount(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2PoolAccount
  masterChefV2PoolAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2PoolAccount_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2PoolAccount_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2PoolAccount!]!
  masterChefV2RewarderPoolAccount(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChefV2RewarderPoolAccount
  masterChefV2RewarderPoolAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChefV2RewarderPoolAccount_orderBy
    orderDirection: OrderDirection
    where: MasterChefV2RewarderPoolAccount_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChefV2RewarderPoolAccount!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Token {
  id: ID!
  symbol: String!
  name: String!
  decimals: Int!
  totalSupply: BigInt!
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  symbol
  name
  decimals
  totalSupply
}

type UniswapV3Deposit {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  block: BigInt!
  timestamp: BigInt!
  sender: Bytes!
  to: Bytes!
  shares: BigInt!
  amount0: BigInt!
  amount1: BigInt!
  amountUSD: BigDecimal!
}

input UniswapV3Deposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: UniswapV3Hypervisor_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  amount0: BigInt
  amount0_not: BigInt
  amount0_gt: BigInt
  amount0_lt: BigInt
  amount0_gte: BigInt
  amount0_lte: BigInt
  amount0_in: [BigInt!]
  amount0_not_in: [BigInt!]
  amount1: BigInt
  amount1_not: BigInt
  amount1_gt: BigInt
  amount1_lt: BigInt
  amount1_gte: BigInt
  amount1_lte: BigInt
  amount1_in: [BigInt!]
  amount1_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapV3Deposit_filter]
  or: [UniswapV3Deposit_filter]
}

enum UniswapV3Deposit_orderBy {
  id
  hypervisor
  hypervisor__id
  hypervisor__version
  hypervisor__owner
  hypervisor__created
  hypervisor__symbol
  hypervisor__fee
  hypervisor__tick
  hypervisor__baseLower
  hypervisor__baseUpper
  hypervisor__baseLiquidity
  hypervisor__baseAmount0
  hypervisor__baseAmount1
  hypervisor__baseTokensOwed0
  hypervisor__baseTokensOwed1
  hypervisor__baseFeeGrowthInside0LastX128
  hypervisor__baseFeeGrowthInside1LastX128
  hypervisor__baseFeeGrowthInside0LastRebalanceX128
  hypervisor__baseFeeGrowthInside1LastRebalanceX128
  hypervisor__limitLower
  hypervisor__limitUpper
  hypervisor__limitLiquidity
  hypervisor__limitAmount0
  hypervisor__limitAmount1
  hypervisor__limitTokensOwed0
  hypervisor__limitTokensOwed1
  hypervisor__limitFeeGrowthInside0LastX128
  hypervisor__limitFeeGrowthInside1LastX128
  hypervisor__limitFeeGrowthInside0LastRebalanceX128
  hypervisor__limitFeeGrowthInside1LastRebalanceX128
  hypervisor__deposit0Max
  hypervisor__deposit1Max
  hypervisor__totalSupply
  hypervisor__maxTotalSupply
  hypervisor__grossFeesClaimed0
  hypervisor__grossFeesClaimed1
  hypervisor__grossFeesClaimedUSD
  hypervisor__protocolFeesCollected0
  hypervisor__protocolFeesCollected1
  hypervisor__protocolFeesCollectedUSD
  hypervisor__feesReinvested0
  hypervisor__feesReinvested1
  hypervisor__feesReinvestedUSD
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__pricePerShare
  hypervisor__accountCount
  hypervisor__lastUpdated
  block
  timestamp
  sender
  to
  shares
  amount0
  amount1
  amountUSD
}

type UniswapV3FeeUpdate {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  block: BigInt!
  timestamp: BigInt!
}

input UniswapV3FeeUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: UniswapV3Hypervisor_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapV3FeeUpdate_filter]
  or: [UniswapV3FeeUpdate_filter]
}

enum UniswapV3FeeUpdate_orderBy {
  id
  hypervisor
  hypervisor__id
  hypervisor__version
  hypervisor__owner
  hypervisor__created
  hypervisor__symbol
  hypervisor__fee
  hypervisor__tick
  hypervisor__baseLower
  hypervisor__baseUpper
  hypervisor__baseLiquidity
  hypervisor__baseAmount0
  hypervisor__baseAmount1
  hypervisor__baseTokensOwed0
  hypervisor__baseTokensOwed1
  hypervisor__baseFeeGrowthInside0LastX128
  hypervisor__baseFeeGrowthInside1LastX128
  hypervisor__baseFeeGrowthInside0LastRebalanceX128
  hypervisor__baseFeeGrowthInside1LastRebalanceX128
  hypervisor__limitLower
  hypervisor__limitUpper
  hypervisor__limitLiquidity
  hypervisor__limitAmount0
  hypervisor__limitAmount1
  hypervisor__limitTokensOwed0
  hypervisor__limitTokensOwed1
  hypervisor__limitFeeGrowthInside0LastX128
  hypervisor__limitFeeGrowthInside1LastX128
  hypervisor__limitFeeGrowthInside0LastRebalanceX128
  hypervisor__limitFeeGrowthInside1LastRebalanceX128
  hypervisor__deposit0Max
  hypervisor__deposit1Max
  hypervisor__totalSupply
  hypervisor__maxTotalSupply
  hypervisor__grossFeesClaimed0
  hypervisor__grossFeesClaimed1
  hypervisor__grossFeesClaimedUSD
  hypervisor__protocolFeesCollected0
  hypervisor__protocolFeesCollected1
  hypervisor__protocolFeesCollectedUSD
  hypervisor__feesReinvested0
  hypervisor__feesReinvested1
  hypervisor__feesReinvestedUSD
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__pricePerShare
  hypervisor__accountCount
  hypervisor__lastUpdated
  block
  timestamp
}

type UniswapV3Hypervisor {
  id: ID!
  factory: UniswapV3HypervisorFactory!
  version: String!
  owner: Bytes!
  created: Int!
  symbol: String!
  pool: UniswapV3Pool!
  fee: Int!
  tick: Int!
  baseLower: Int!
  baseUpper: Int!
  baseLiquidity: BigInt!
  baseAmount0: BigInt!
  baseAmount1: BigInt!
  baseTokensOwed0: BigInt!
  baseTokensOwed1: BigInt!
  baseFeeGrowthInside0LastX128: BigInt!
  baseFeeGrowthInside1LastX128: BigInt!
  baseFeeGrowthInside0LastRebalanceX128: BigInt!
  baseFeeGrowthInside1LastRebalanceX128: BigInt!
  limitLower: Int!
  limitUpper: Int!
  limitLiquidity: BigInt!
  limitAmount0: BigInt!
  limitAmount1: BigInt!
  limitTokensOwed0: BigInt!
  limitTokensOwed1: BigInt!
  limitFeeGrowthInside0LastX128: BigInt!
  limitFeeGrowthInside1LastX128: BigInt!
  limitFeeGrowthInside0LastRebalanceX128: BigInt!
  limitFeeGrowthInside1LastRebalanceX128: BigInt!
  deposit0Max: BigInt!
  deposit1Max: BigInt!
  totalSupply: BigInt!
  maxTotalSupply: BigInt!
  grossFeesClaimed0: BigInt!
  grossFeesClaimed1: BigInt!
  grossFeesClaimedUSD: BigDecimal!
  protocolFeesCollected0: BigInt!
  protocolFeesCollected1: BigInt!
  protocolFeesCollectedUSD: BigDecimal!
  feesReinvested0: BigInt!
  feesReinvested1: BigInt!
  feesReinvestedUSD: BigDecimal!
  tvl0: BigInt!
  tvl1: BigInt!
  tvlUSD: BigDecimal!
  pricePerShare: BigDecimal!
  conversion: UniswapV3HypervisorConversion!
  accountCount: BigInt!
  deposits(skip: Int = 0, first: Int = 100, orderBy: UniswapV3Deposit_orderBy, orderDirection: OrderDirection, where: UniswapV3Deposit_filter): [UniswapV3Deposit!]!
  rebalances(skip: Int = 0, first: Int = 100, orderBy: UniswapV3Rebalance_orderBy, orderDirection: OrderDirection, where: UniswapV3Rebalance_filter): [UniswapV3Rebalance!]!
  withdraws(skip: Int = 0, first: Int = 100, orderBy: UniswapV3Withdraw_orderBy, orderDirection: OrderDirection, where: UniswapV3Withdraw_filter): [UniswapV3Withdraw!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: UniswapV3HypervisorDayData_orderBy, orderDirection: OrderDirection, where: UniswapV3HypervisorDayData_filter): [UniswapV3HypervisorDayData!]!
  feeUpdates(skip: Int = 0, first: Int = 100, orderBy: UniswapV3FeeUpdate_orderBy, orderDirection: OrderDirection, where: UniswapV3FeeUpdate_filter): [UniswapV3FeeUpdate!]!
  lastUpdated: BigInt!
}

type UniswapV3HypervisorConversion {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  baseTokenIndex: Int!
  baseToken: Token!
  usdPath: [String!]!
  usdPathIndex: [Int!]!
  priceTokenInBase: BigDecimal!
  priceBaseInUSD: BigDecimal!
}

input UniswapV3HypervisorConversion_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: UniswapV3Hypervisor_filter
  baseTokenIndex: Int
  baseTokenIndex_not: Int
  baseTokenIndex_gt: Int
  baseTokenIndex_lt: Int
  baseTokenIndex_gte: Int
  baseTokenIndex_lte: Int
  baseTokenIndex_in: [Int!]
  baseTokenIndex_not_in: [Int!]
  baseToken: String
  baseToken_not: String
  baseToken_gt: String
  baseToken_lt: String
  baseToken_gte: String
  baseToken_lte: String
  baseToken_in: [String!]
  baseToken_not_in: [String!]
  baseToken_contains: String
  baseToken_contains_nocase: String
  baseToken_not_contains: String
  baseToken_not_contains_nocase: String
  baseToken_starts_with: String
  baseToken_starts_with_nocase: String
  baseToken_not_starts_with: String
  baseToken_not_starts_with_nocase: String
  baseToken_ends_with: String
  baseToken_ends_with_nocase: String
  baseToken_not_ends_with: String
  baseToken_not_ends_with_nocase: String
  baseToken_: Token_filter
  usdPath: [String!]
  usdPath_not: [String!]
  usdPath_contains: [String!]
  usdPath_contains_nocase: [String!]
  usdPath_not_contains: [String!]
  usdPath_not_contains_nocase: [String!]
  usdPathIndex: [Int!]
  usdPathIndex_not: [Int!]
  usdPathIndex_contains: [Int!]
  usdPathIndex_contains_nocase: [Int!]
  usdPathIndex_not_contains: [Int!]
  usdPathIndex_not_contains_nocase: [Int!]
  priceTokenInBase: BigDecimal
  priceTokenInBase_not: BigDecimal
  priceTokenInBase_gt: BigDecimal
  priceTokenInBase_lt: BigDecimal
  priceTokenInBase_gte: BigDecimal
  priceTokenInBase_lte: BigDecimal
  priceTokenInBase_in: [BigDecimal!]
  priceTokenInBase_not_in: [BigDecimal!]
  priceBaseInUSD: BigDecimal
  priceBaseInUSD_not: BigDecimal
  priceBaseInUSD_gt: BigDecimal
  priceBaseInUSD_lt: BigDecimal
  priceBaseInUSD_gte: BigDecimal
  priceBaseInUSD_lte: BigDecimal
  priceBaseInUSD_in: [BigDecimal!]
  priceBaseInUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapV3HypervisorConversion_filter]
  or: [UniswapV3HypervisorConversion_filter]
}

enum UniswapV3HypervisorConversion_orderBy {
  id
  hypervisor
  hypervisor__id
  hypervisor__version
  hypervisor__owner
  hypervisor__created
  hypervisor__symbol
  hypervisor__fee
  hypervisor__tick
  hypervisor__baseLower
  hypervisor__baseUpper
  hypervisor__baseLiquidity
  hypervisor__baseAmount0
  hypervisor__baseAmount1
  hypervisor__baseTokensOwed0
  hypervisor__baseTokensOwed1
  hypervisor__baseFeeGrowthInside0LastX128
  hypervisor__baseFeeGrowthInside1LastX128
  hypervisor__baseFeeGrowthInside0LastRebalanceX128
  hypervisor__baseFeeGrowthInside1LastRebalanceX128
  hypervisor__limitLower
  hypervisor__limitUpper
  hypervisor__limitLiquidity
  hypervisor__limitAmount0
  hypervisor__limitAmount1
  hypervisor__limitTokensOwed0
  hypervisor__limitTokensOwed1
  hypervisor__limitFeeGrowthInside0LastX128
  hypervisor__limitFeeGrowthInside1LastX128
  hypervisor__limitFeeGrowthInside0LastRebalanceX128
  hypervisor__limitFeeGrowthInside1LastRebalanceX128
  hypervisor__deposit0Max
  hypervisor__deposit1Max
  hypervisor__totalSupply
  hypervisor__maxTotalSupply
  hypervisor__grossFeesClaimed0
  hypervisor__grossFeesClaimed1
  hypervisor__grossFeesClaimedUSD
  hypervisor__protocolFeesCollected0
  hypervisor__protocolFeesCollected1
  hypervisor__protocolFeesCollectedUSD
  hypervisor__feesReinvested0
  hypervisor__feesReinvested1
  hypervisor__feesReinvestedUSD
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__pricePerShare
  hypervisor__accountCount
  hypervisor__lastUpdated
  baseTokenIndex
  baseToken
  baseToken__id
  baseToken__symbol
  baseToken__name
  baseToken__decimals
  baseToken__totalSupply
  usdPath
  usdPathIndex
  priceTokenInBase
  priceBaseInUSD
}

type UniswapV3HypervisorDayData {
  id: ID!
  date: BigInt!
  hypervisor: UniswapV3Hypervisor!
  deposited0: BigInt!
  deposited1: BigInt!
  depositedUSD: BigDecimal!
  withdrawn0: BigInt!
  withdrawn1: BigInt!
  withdrawnUSD: BigDecimal!
  grossFeesClaimed0: BigInt!
  grossFeesClaimed1: BigInt!
  grossFeesClaimedUSD: BigDecimal!
  protocolFeesCollected0: BigInt!
  protocolFeesCollected1: BigInt!
  protocolFeesCollectedUSD: BigDecimal!
  feesReinvested0: BigInt!
  feesReinvested1: BigInt!
  feesReinvestedUSD: BigDecimal!
  totalSupply: BigInt!
  tvl0: BigInt!
  tvl1: BigInt!
  tvlUSD: BigDecimal!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
}

input UniswapV3HypervisorDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: UniswapV3Hypervisor_filter
  deposited0: BigInt
  deposited0_not: BigInt
  deposited0_gt: BigInt
  deposited0_lt: BigInt
  deposited0_gte: BigInt
  deposited0_lte: BigInt
  deposited0_in: [BigInt!]
  deposited0_not_in: [BigInt!]
  deposited1: BigInt
  deposited1_not: BigInt
  deposited1_gt: BigInt
  deposited1_lt: BigInt
  deposited1_gte: BigInt
  deposited1_lte: BigInt
  deposited1_in: [BigInt!]
  deposited1_not_in: [BigInt!]
  depositedUSD: BigDecimal
  depositedUSD_not: BigDecimal
  depositedUSD_gt: BigDecimal
  depositedUSD_lt: BigDecimal
  depositedUSD_gte: BigDecimal
  depositedUSD_lte: BigDecimal
  depositedUSD_in: [BigDecimal!]
  depositedUSD_not_in: [BigDecimal!]
  withdrawn0: BigInt
  withdrawn0_not: BigInt
  withdrawn0_gt: BigInt
  withdrawn0_lt: BigInt
  withdrawn0_gte: BigInt
  withdrawn0_lte: BigInt
  withdrawn0_in: [BigInt!]
  withdrawn0_not_in: [BigInt!]
  withdrawn1: BigInt
  withdrawn1_not: BigInt
  withdrawn1_gt: BigInt
  withdrawn1_lt: BigInt
  withdrawn1_gte: BigInt
  withdrawn1_lte: BigInt
  withdrawn1_in: [BigInt!]
  withdrawn1_not_in: [BigInt!]
  withdrawnUSD: BigDecimal
  withdrawnUSD_not: BigDecimal
  withdrawnUSD_gt: BigDecimal
  withdrawnUSD_lt: BigDecimal
  withdrawnUSD_gte: BigDecimal
  withdrawnUSD_lte: BigDecimal
  withdrawnUSD_in: [BigDecimal!]
  withdrawnUSD_not_in: [BigDecimal!]
  grossFeesClaimed0: BigInt
  grossFeesClaimed0_not: BigInt
  grossFeesClaimed0_gt: BigInt
  grossFeesClaimed0_lt: BigInt
  grossFeesClaimed0_gte: BigInt
  grossFeesClaimed0_lte: BigInt
  grossFeesClaimed0_in: [BigInt!]
  grossFeesClaimed0_not_in: [BigInt!]
  grossFeesClaimed1: BigInt
  grossFeesClaimed1_not: BigInt
  grossFeesClaimed1_gt: BigInt
  grossFeesClaimed1_lt: BigInt
  grossFeesClaimed1_gte: BigInt
  grossFeesClaimed1_lte: BigInt
  grossFeesClaimed1_in: [BigInt!]
  grossFeesClaimed1_not_in: [BigInt!]
  grossFeesClaimedUSD: BigDecimal
  grossFeesClaimedUSD_not: BigDecimal
  grossFeesClaimedUSD_gt: BigDecimal
  grossFeesClaimedUSD_lt: BigDecimal
  grossFeesClaimedUSD_gte: BigDecimal
  grossFeesClaimedUSD_lte: BigDecimal
  grossFeesClaimedUSD_in: [BigDecimal!]
  grossFeesClaimedUSD_not_in: [BigDecimal!]
  protocolFeesCollected0: BigInt
  protocolFeesCollected0_not: BigInt
  protocolFeesCollected0_gt: BigInt
  protocolFeesCollected0_lt: BigInt
  protocolFeesCollected0_gte: BigInt
  protocolFeesCollected0_lte: BigInt
  protocolFeesCollected0_in: [BigInt!]
  protocolFeesCollected0_not_in: [BigInt!]
  protocolFeesCollected1: BigInt
  protocolFeesCollected1_not: BigInt
  protocolFeesCollected1_gt: BigInt
  protocolFeesCollected1_lt: BigInt
  protocolFeesCollected1_gte: BigInt
  protocolFeesCollected1_lte: BigInt
  protocolFeesCollected1_in: [BigInt!]
  protocolFeesCollected1_not_in: [BigInt!]
  protocolFeesCollectedUSD: BigDecimal
  protocolFeesCollectedUSD_not: BigDecimal
  protocolFeesCollectedUSD_gt: BigDecimal
  protocolFeesCollectedUSD_lt: BigDecimal
  protocolFeesCollectedUSD_gte: BigDecimal
  protocolFeesCollectedUSD_lte: BigDecimal
  protocolFeesCollectedUSD_in: [BigDecimal!]
  protocolFeesCollectedUSD_not_in: [BigDecimal!]
  feesReinvested0: BigInt
  feesReinvested0_not: BigInt
  feesReinvested0_gt: BigInt
  feesReinvested0_lt: BigInt
  feesReinvested0_gte: BigInt
  feesReinvested0_lte: BigInt
  feesReinvested0_in: [BigInt!]
  feesReinvested0_not_in: [BigInt!]
  feesReinvested1: BigInt
  feesReinvested1_not: BigInt
  feesReinvested1_gt: BigInt
  feesReinvested1_lt: BigInt
  feesReinvested1_gte: BigInt
  feesReinvested1_lte: BigInt
  feesReinvested1_in: [BigInt!]
  feesReinvested1_not_in: [BigInt!]
  feesReinvestedUSD: BigDecimal
  feesReinvestedUSD_not: BigDecimal
  feesReinvestedUSD_gt: BigDecimal
  feesReinvestedUSD_lt: BigDecimal
  feesReinvestedUSD_gte: BigDecimal
  feesReinvestedUSD_lte: BigDecimal
  feesReinvestedUSD_in: [BigDecimal!]
  feesReinvestedUSD_not_in: [BigDecimal!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  tvl0: BigInt
  tvl0_not: BigInt
  tvl0_gt: BigInt
  tvl0_lt: BigInt
  tvl0_gte: BigInt
  tvl0_lte: BigInt
  tvl0_in: [BigInt!]
  tvl0_not_in: [BigInt!]
  tvl1: BigInt
  tvl1_not: BigInt
  tvl1_gt: BigInt
  tvl1_lt: BigInt
  tvl1_gte: BigInt
  tvl1_lte: BigInt
  tvl1_in: [BigInt!]
  tvl1_not_in: [BigInt!]
  tvlUSD: BigDecimal
  tvlUSD_not: BigDecimal
  tvlUSD_gt: BigDecimal
  tvlUSD_lt: BigDecimal
  tvlUSD_gte: BigDecimal
  tvlUSD_lte: BigDecimal
  tvlUSD_in: [BigDecimal!]
  tvlUSD_not_in: [BigDecimal!]
  open: BigDecimal
  open_not: BigDecimal
  open_gt: BigDecimal
  open_lt: BigDecimal
  open_gte: BigDecimal
  open_lte: BigDecimal
  open_in: [BigDecimal!]
  open_not_in: [BigDecimal!]
  high: BigDecimal
  high_not: BigDecimal
  high_gt: BigDecimal
  high_lt: BigDecimal
  high_gte: BigDecimal
  high_lte: BigDecimal
  high_in: [BigDecimal!]
  high_not_in: [BigDecimal!]
  low: BigDecimal
  low_not: BigDecimal
  low_gt: BigDecimal
  low_lt: BigDecimal
  low_gte: BigDecimal
  low_lte: BigDecimal
  low_in: [BigDecimal!]
  low_not_in: [BigDecimal!]
  close: BigDecimal
  close_not: BigDecimal
  close_gt: BigDecimal
  close_lt: BigDecimal
  close_gte: BigDecimal
  close_lte: BigDecimal
  close_in: [BigDecimal!]
  close_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapV3HypervisorDayData_filter]
  or: [UniswapV3HypervisorDayData_filter]
}

enum UniswapV3HypervisorDayData_orderBy {
  id
  date
  hypervisor
  hypervisor__id
  hypervisor__version
  hypervisor__owner
  hypervisor__created
  hypervisor__symbol
  hypervisor__fee
  hypervisor__tick
  hypervisor__baseLower
  hypervisor__baseUpper
  hypervisor__baseLiquidity
  hypervisor__baseAmount0
  hypervisor__baseAmount1
  hypervisor__baseTokensOwed0
  hypervisor__baseTokensOwed1
  hypervisor__baseFeeGrowthInside0LastX128
  hypervisor__baseFeeGrowthInside1LastX128
  hypervisor__baseFeeGrowthInside0LastRebalanceX128
  hypervisor__baseFeeGrowthInside1LastRebalanceX128
  hypervisor__limitLower
  hypervisor__limitUpper
  hypervisor__limitLiquidity
  hypervisor__limitAmount0
  hypervisor__limitAmount1
  hypervisor__limitTokensOwed0
  hypervisor__limitTokensOwed1
  hypervisor__limitFeeGrowthInside0LastX128
  hypervisor__limitFeeGrowthInside1LastX128
  hypervisor__limitFeeGrowthInside0LastRebalanceX128
  hypervisor__limitFeeGrowthInside1LastRebalanceX128
  hypervisor__deposit0Max
  hypervisor__deposit1Max
  hypervisor__totalSupply
  hypervisor__maxTotalSupply
  hypervisor__grossFeesClaimed0
  hypervisor__grossFeesClaimed1
  hypervisor__grossFeesClaimedUSD
  hypervisor__protocolFeesCollected0
  hypervisor__protocolFeesCollected1
  hypervisor__protocolFeesCollectedUSD
  hypervisor__feesReinvested0
  hypervisor__feesReinvested1
  hypervisor__feesReinvestedUSD
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__pricePerShare
  hypervisor__accountCount
  hypervisor__lastUpdated
  deposited0
  deposited1
  depositedUSD
  withdrawn0
  withdrawn1
  withdrawnUSD
  grossFeesClaimed0
  grossFeesClaimed1
  grossFeesClaimedUSD
  protocolFeesCollected0
  protocolFeesCollected1
  protocolFeesCollectedUSD
  feesReinvested0
  feesReinvested1
  feesReinvestedUSD
  totalSupply
  tvl0
  tvl1
  tvlUSD
  open
  high
  low
  close
}

type UniswapV3HypervisorFactory {
  id: ID!
  hypervisorCount: BigInt!
  grossFeesClaimedUSD: BigDecimal!
  protocolFeesCollectedUSD: BigDecimal!
  feesReinvestedUSD: BigDecimal!
  tvlUSD: BigDecimal!
  hypervisors(skip: Int = 0, first: Int = 100, orderBy: UniswapV3Hypervisor_orderBy, orderDirection: OrderDirection, where: UniswapV3Hypervisor_filter): [UniswapV3Hypervisor!]!
}

input UniswapV3HypervisorFactory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hypervisorCount: BigInt
  hypervisorCount_not: BigInt
  hypervisorCount_gt: BigInt
  hypervisorCount_lt: BigInt
  hypervisorCount_gte: BigInt
  hypervisorCount_lte: BigInt
  hypervisorCount_in: [BigInt!]
  hypervisorCount_not_in: [BigInt!]
  grossFeesClaimedUSD: BigDecimal
  grossFeesClaimedUSD_not: BigDecimal
  grossFeesClaimedUSD_gt: BigDecimal
  grossFeesClaimedUSD_lt: BigDecimal
  grossFeesClaimedUSD_gte: BigDecimal
  grossFeesClaimedUSD_lte: BigDecimal
  grossFeesClaimedUSD_in: [BigDecimal!]
  grossFeesClaimedUSD_not_in: [BigDecimal!]
  protocolFeesCollectedUSD: BigDecimal
  protocolFeesCollectedUSD_not: BigDecimal
  protocolFeesCollectedUSD_gt: BigDecimal
  protocolFeesCollectedUSD_lt: BigDecimal
  protocolFeesCollectedUSD_gte: BigDecimal
  protocolFeesCollectedUSD_lte: BigDecimal
  protocolFeesCollectedUSD_in: [BigDecimal!]
  protocolFeesCollectedUSD_not_in: [BigDecimal!]
  feesReinvestedUSD: BigDecimal
  feesReinvestedUSD_not: BigDecimal
  feesReinvestedUSD_gt: BigDecimal
  feesReinvestedUSD_lt: BigDecimal
  feesReinvestedUSD_gte: BigDecimal
  feesReinvestedUSD_lte: BigDecimal
  feesReinvestedUSD_in: [BigDecimal!]
  feesReinvestedUSD_not_in: [BigDecimal!]
  tvlUSD: BigDecimal
  tvlUSD_not: BigDecimal
  tvlUSD_gt: BigDecimal
  tvlUSD_lt: BigDecimal
  tvlUSD_gte: BigDecimal
  tvlUSD_lte: BigDecimal
  tvlUSD_in: [BigDecimal!]
  tvlUSD_not_in: [BigDecimal!]
  hypervisors_: UniswapV3Hypervisor_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapV3HypervisorFactory_filter]
  or: [UniswapV3HypervisorFactory_filter]
}

enum UniswapV3HypervisorFactory_orderBy {
  id
  hypervisorCount
  grossFeesClaimedUSD
  protocolFeesCollectedUSD
  feesReinvestedUSD
  tvlUSD
  hypervisors
}

type UniswapV3HypervisorShare {
  id: ID!
  account: Account!
  hypervisor: UniswapV3Hypervisor!
  shares: BigInt!
  initialToken0: BigInt!
  initialToken1: BigInt!
  initialUSD: BigDecimal!
}

input UniswapV3HypervisorShare_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: UniswapV3Hypervisor_filter
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  initialToken0: BigInt
  initialToken0_not: BigInt
  initialToken0_gt: BigInt
  initialToken0_lt: BigInt
  initialToken0_gte: BigInt
  initialToken0_lte: BigInt
  initialToken0_in: [BigInt!]
  initialToken0_not_in: [BigInt!]
  initialToken1: BigInt
  initialToken1_not: BigInt
  initialToken1_gt: BigInt
  initialToken1_lt: BigInt
  initialToken1_gte: BigInt
  initialToken1_lte: BigInt
  initialToken1_in: [BigInt!]
  initialToken1_not_in: [BigInt!]
  initialUSD: BigDecimal
  initialUSD_not: BigDecimal
  initialUSD_gt: BigDecimal
  initialUSD_lt: BigDecimal
  initialUSD_gte: BigDecimal
  initialUSD_lte: BigDecimal
  initialUSD_in: [BigDecimal!]
  initialUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapV3HypervisorShare_filter]
  or: [UniswapV3HypervisorShare_filter]
}

enum UniswapV3HypervisorShare_orderBy {
  id
  account
  account__id
  account__type
  account__gammaDeposited
  account__gammaEarnedRealized
  account__hypervisorCount
  hypervisor
  hypervisor__id
  hypervisor__version
  hypervisor__owner
  hypervisor__created
  hypervisor__symbol
  hypervisor__fee
  hypervisor__tick
  hypervisor__baseLower
  hypervisor__baseUpper
  hypervisor__baseLiquidity
  hypervisor__baseAmount0
  hypervisor__baseAmount1
  hypervisor__baseTokensOwed0
  hypervisor__baseTokensOwed1
  hypervisor__baseFeeGrowthInside0LastX128
  hypervisor__baseFeeGrowthInside1LastX128
  hypervisor__baseFeeGrowthInside0LastRebalanceX128
  hypervisor__baseFeeGrowthInside1LastRebalanceX128
  hypervisor__limitLower
  hypervisor__limitUpper
  hypervisor__limitLiquidity
  hypervisor__limitAmount0
  hypervisor__limitAmount1
  hypervisor__limitTokensOwed0
  hypervisor__limitTokensOwed1
  hypervisor__limitFeeGrowthInside0LastX128
  hypervisor__limitFeeGrowthInside1LastX128
  hypervisor__limitFeeGrowthInside0LastRebalanceX128
  hypervisor__limitFeeGrowthInside1LastRebalanceX128
  hypervisor__deposit0Max
  hypervisor__deposit1Max
  hypervisor__totalSupply
  hypervisor__maxTotalSupply
  hypervisor__grossFeesClaimed0
  hypervisor__grossFeesClaimed1
  hypervisor__grossFeesClaimedUSD
  hypervisor__protocolFeesCollected0
  hypervisor__protocolFeesCollected1
  hypervisor__protocolFeesCollectedUSD
  hypervisor__feesReinvested0
  hypervisor__feesReinvested1
  hypervisor__feesReinvestedUSD
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__pricePerShare
  hypervisor__accountCount
  hypervisor__lastUpdated
  shares
  initialToken0
  initialToken1
  initialUSD
}

input UniswapV3Hypervisor_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: UniswapV3HypervisorFactory_filter
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  created: Int
  created_not: Int
  created_gt: Int
  created_lt: Int
  created_gte: Int
  created_lte: Int
  created_in: [Int!]
  created_not_in: [Int!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: UniswapV3Pool_filter
  fee: Int
  fee_not: Int
  fee_gt: Int
  fee_lt: Int
  fee_gte: Int
  fee_lte: Int
  fee_in: [Int!]
  fee_not_in: [Int!]
  tick: Int
  tick_not: Int
  tick_gt: Int
  tick_lt: Int
  tick_gte: Int
  tick_lte: Int
  tick_in: [Int!]
  tick_not_in: [Int!]
  baseLower: Int
  baseLower_not: Int
  baseLower_gt: Int
  baseLower_lt: Int
  baseLower_gte: Int
  baseLower_lte: Int
  baseLower_in: [Int!]
  baseLower_not_in: [Int!]
  baseUpper: Int
  baseUpper_not: Int
  baseUpper_gt: Int
  baseUpper_lt: Int
  baseUpper_gte: Int
  baseUpper_lte: Int
  baseUpper_in: [Int!]
  baseUpper_not_in: [Int!]
  baseLiquidity: BigInt
  baseLiquidity_not: BigInt
  baseLiquidity_gt: BigInt
  baseLiquidity_lt: BigInt
  baseLiquidity_gte: BigInt
  baseLiquidity_lte: BigInt
  baseLiquidity_in: [BigInt!]
  baseLiquidity_not_in: [BigInt!]
  baseAmount0: BigInt
  baseAmount0_not: BigInt
  baseAmount0_gt: BigInt
  baseAmount0_lt: BigInt
  baseAmount0_gte: BigInt
  baseAmount0_lte: BigInt
  baseAmount0_in: [BigInt!]
  baseAmount0_not_in: [BigInt!]
  baseAmount1: BigInt
  baseAmount1_not: BigInt
  baseAmount1_gt: BigInt
  baseAmount1_lt: BigInt
  baseAmount1_gte: BigInt
  baseAmount1_lte: BigInt
  baseAmount1_in: [BigInt!]
  baseAmount1_not_in: [BigInt!]
  baseTokensOwed0: BigInt
  baseTokensOwed0_not: BigInt
  baseTokensOwed0_gt: BigInt
  baseTokensOwed0_lt: BigInt
  baseTokensOwed0_gte: BigInt
  baseTokensOwed0_lte: BigInt
  baseTokensOwed0_in: [BigInt!]
  baseTokensOwed0_not_in: [BigInt!]
  baseTokensOwed1: BigInt
  baseTokensOwed1_not: BigInt
  baseTokensOwed1_gt: BigInt
  baseTokensOwed1_lt: BigInt
  baseTokensOwed1_gte: BigInt
  baseTokensOwed1_lte: BigInt
  baseTokensOwed1_in: [BigInt!]
  baseTokensOwed1_not_in: [BigInt!]
  baseFeeGrowthInside0LastX128: BigInt
  baseFeeGrowthInside0LastX128_not: BigInt
  baseFeeGrowthInside0LastX128_gt: BigInt
  baseFeeGrowthInside0LastX128_lt: BigInt
  baseFeeGrowthInside0LastX128_gte: BigInt
  baseFeeGrowthInside0LastX128_lte: BigInt
  baseFeeGrowthInside0LastX128_in: [BigInt!]
  baseFeeGrowthInside0LastX128_not_in: [BigInt!]
  baseFeeGrowthInside1LastX128: BigInt
  baseFeeGrowthInside1LastX128_not: BigInt
  baseFeeGrowthInside1LastX128_gt: BigInt
  baseFeeGrowthInside1LastX128_lt: BigInt
  baseFeeGrowthInside1LastX128_gte: BigInt
  baseFeeGrowthInside1LastX128_lte: BigInt
  baseFeeGrowthInside1LastX128_in: [BigInt!]
  baseFeeGrowthInside1LastX128_not_in: [BigInt!]
  baseFeeGrowthInside0LastRebalanceX128: BigInt
  baseFeeGrowthInside0LastRebalanceX128_not: BigInt
  baseFeeGrowthInside0LastRebalanceX128_gt: BigInt
  baseFeeGrowthInside0LastRebalanceX128_lt: BigInt
  baseFeeGrowthInside0LastRebalanceX128_gte: BigInt
  baseFeeGrowthInside0LastRebalanceX128_lte: BigInt
  baseFeeGrowthInside0LastRebalanceX128_in: [BigInt!]
  baseFeeGrowthInside0LastRebalanceX128_not_in: [BigInt!]
  baseFeeGrowthInside1LastRebalanceX128: BigInt
  baseFeeGrowthInside1LastRebalanceX128_not: BigInt
  baseFeeGrowthInside1LastRebalanceX128_gt: BigInt
  baseFeeGrowthInside1LastRebalanceX128_lt: BigInt
  baseFeeGrowthInside1LastRebalanceX128_gte: BigInt
  baseFeeGrowthInside1LastRebalanceX128_lte: BigInt
  baseFeeGrowthInside1LastRebalanceX128_in: [BigInt!]
  baseFeeGrowthInside1LastRebalanceX128_not_in: [BigInt!]
  limitLower: Int
  limitLower_not: Int
  limitLower_gt: Int
  limitLower_lt: Int
  limitLower_gte: Int
  limitLower_lte: Int
  limitLower_in: [Int!]
  limitLower_not_in: [Int!]
  limitUpper: Int
  limitUpper_not: Int
  limitUpper_gt: Int
  limitUpper_lt: Int
  limitUpper_gte: Int
  limitUpper_lte: Int
  limitUpper_in: [Int!]
  limitUpper_not_in: [Int!]
  limitLiquidity: BigInt
  limitLiquidity_not: BigInt
  limitLiquidity_gt: BigInt
  limitLiquidity_lt: BigInt
  limitLiquidity_gte: BigInt
  limitLiquidity_lte: BigInt
  limitLiquidity_in: [BigInt!]
  limitLiquidity_not_in: [BigInt!]
  limitAmount0: BigInt
  limitAmount0_not: BigInt
  limitAmount0_gt: BigInt
  limitAmount0_lt: BigInt
  limitAmount0_gte: BigInt
  limitAmount0_lte: BigInt
  limitAmount0_in: [BigInt!]
  limitAmount0_not_in: [BigInt!]
  limitAmount1: BigInt
  limitAmount1_not: BigInt
  limitAmount1_gt: BigInt
  limitAmount1_lt: BigInt
  limitAmount1_gte: BigInt
  limitAmount1_lte: BigInt
  limitAmount1_in: [BigInt!]
  limitAmount1_not_in: [BigInt!]
  limitTokensOwed0: BigInt
  limitTokensOwed0_not: BigInt
  limitTokensOwed0_gt: BigInt
  limitTokensOwed0_lt: BigInt
  limitTokensOwed0_gte: BigInt
  limitTokensOwed0_lte: BigInt
  limitTokensOwed0_in: [BigInt!]
  limitTokensOwed0_not_in: [BigInt!]
  limitTokensOwed1: BigInt
  limitTokensOwed1_not: BigInt
  limitTokensOwed1_gt: BigInt
  limitTokensOwed1_lt: BigInt
  limitTokensOwed1_gte: BigInt
  limitTokensOwed1_lte: BigInt
  limitTokensOwed1_in: [BigInt!]
  limitTokensOwed1_not_in: [BigInt!]
  limitFeeGrowthInside0LastX128: BigInt
  limitFeeGrowthInside0LastX128_not: BigInt
  limitFeeGrowthInside0LastX128_gt: BigInt
  limitFeeGrowthInside0LastX128_lt: BigInt
  limitFeeGrowthInside0LastX128_gte: BigInt
  limitFeeGrowthInside0LastX128_lte: BigInt
  limitFeeGrowthInside0LastX128_in: [BigInt!]
  limitFeeGrowthInside0LastX128_not_in: [BigInt!]
  limitFeeGrowthInside1LastX128: BigInt
  limitFeeGrowthInside1LastX128_not: BigInt
  limitFeeGrowthInside1LastX128_gt: BigInt
  limitFeeGrowthInside1LastX128_lt: BigInt
  limitFeeGrowthInside1LastX128_gte: BigInt
  limitFeeGrowthInside1LastX128_lte: BigInt
  limitFeeGrowthInside1LastX128_in: [BigInt!]
  limitFeeGrowthInside1LastX128_not_in: [BigInt!]
  limitFeeGrowthInside0LastRebalanceX128: BigInt
  limitFeeGrowthInside0LastRebalanceX128_not: BigInt
  limitFeeGrowthInside0LastRebalanceX128_gt: BigInt
  limitFeeGrowthInside0LastRebalanceX128_lt: BigInt
  limitFeeGrowthInside0LastRebalanceX128_gte: BigInt
  limitFeeGrowthInside0LastRebalanceX128_lte: BigInt
  limitFeeGrowthInside0LastRebalanceX128_in: [BigInt!]
  limitFeeGrowthInside0LastRebalanceX128_not_in: [BigInt!]
  limitFeeGrowthInside1LastRebalanceX128: BigInt
  limitFeeGrowthInside1LastRebalanceX128_not: BigInt
  limitFeeGrowthInside1LastRebalanceX128_gt: BigInt
  limitFeeGrowthInside1LastRebalanceX128_lt: BigInt
  limitFeeGrowthInside1LastRebalanceX128_gte: BigInt
  limitFeeGrowthInside1LastRebalanceX128_lte: BigInt
  limitFeeGrowthInside1LastRebalanceX128_in: [BigInt!]
  limitFeeGrowthInside1LastRebalanceX128_not_in: [BigInt!]
  deposit0Max: BigInt
  deposit0Max_not: BigInt
  deposit0Max_gt: BigInt
  deposit0Max_lt: BigInt
  deposit0Max_gte: BigInt
  deposit0Max_lte: BigInt
  deposit0Max_in: [BigInt!]
  deposit0Max_not_in: [BigInt!]
  deposit1Max: BigInt
  deposit1Max_not: BigInt
  deposit1Max_gt: BigInt
  deposit1Max_lt: BigInt
  deposit1Max_gte: BigInt
  deposit1Max_lte: BigInt
  deposit1Max_in: [BigInt!]
  deposit1Max_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  maxTotalSupply: BigInt
  maxTotalSupply_not: BigInt
  maxTotalSupply_gt: BigInt
  maxTotalSupply_lt: BigInt
  maxTotalSupply_gte: BigInt
  maxTotalSupply_lte: BigInt
  maxTotalSupply_in: [BigInt!]
  maxTotalSupply_not_in: [BigInt!]
  grossFeesClaimed0: BigInt
  grossFeesClaimed0_not: BigInt
  grossFeesClaimed0_gt: BigInt
  grossFeesClaimed0_lt: BigInt
  grossFeesClaimed0_gte: BigInt
  grossFeesClaimed0_lte: BigInt
  grossFeesClaimed0_in: [BigInt!]
  grossFeesClaimed0_not_in: [BigInt!]
  grossFeesClaimed1: BigInt
  grossFeesClaimed1_not: BigInt
  grossFeesClaimed1_gt: BigInt
  grossFeesClaimed1_lt: BigInt
  grossFeesClaimed1_gte: BigInt
  grossFeesClaimed1_lte: BigInt
  grossFeesClaimed1_in: [BigInt!]
  grossFeesClaimed1_not_in: [BigInt!]
  grossFeesClaimedUSD: BigDecimal
  grossFeesClaimedUSD_not: BigDecimal
  grossFeesClaimedUSD_gt: BigDecimal
  grossFeesClaimedUSD_lt: BigDecimal
  grossFeesClaimedUSD_gte: BigDecimal
  grossFeesClaimedUSD_lte: BigDecimal
  grossFeesClaimedUSD_in: [BigDecimal!]
  grossFeesClaimedUSD_not_in: [BigDecimal!]
  protocolFeesCollected0: BigInt
  protocolFeesCollected0_not: BigInt
  protocolFeesCollected0_gt: BigInt
  protocolFeesCollected0_lt: BigInt
  protocolFeesCollected0_gte: BigInt
  protocolFeesCollected0_lte: BigInt
  protocolFeesCollected0_in: [BigInt!]
  protocolFeesCollected0_not_in: [BigInt!]
  protocolFeesCollected1: BigInt
  protocolFeesCollected1_not: BigInt
  protocolFeesCollected1_gt: BigInt
  protocolFeesCollected1_lt: BigInt
  protocolFeesCollected1_gte: BigInt
  protocolFeesCollected1_lte: BigInt
  protocolFeesCollected1_in: [BigInt!]
  protocolFeesCollected1_not_in: [BigInt!]
  protocolFeesCollectedUSD: BigDecimal
  protocolFeesCollectedUSD_not: BigDecimal
  protocolFeesCollectedUSD_gt: BigDecimal
  protocolFeesCollectedUSD_lt: BigDecimal
  protocolFeesCollectedUSD_gte: BigDecimal
  protocolFeesCollectedUSD_lte: BigDecimal
  protocolFeesCollectedUSD_in: [BigDecimal!]
  protocolFeesCollectedUSD_not_in: [BigDecimal!]
  feesReinvested0: BigInt
  feesReinvested0_not: BigInt
  feesReinvested0_gt: BigInt
  feesReinvested0_lt: BigInt
  feesReinvested0_gte: BigInt
  feesReinvested0_lte: BigInt
  feesReinvested0_in: [BigInt!]
  feesReinvested0_not_in: [BigInt!]
  feesReinvested1: BigInt
  feesReinvested1_not: BigInt
  feesReinvested1_gt: BigInt
  feesReinvested1_lt: BigInt
  feesReinvested1_gte: BigInt
  feesReinvested1_lte: BigInt
  feesReinvested1_in: [BigInt!]
  feesReinvested1_not_in: [BigInt!]
  feesReinvestedUSD: BigDecimal
  feesReinvestedUSD_not: BigDecimal
  feesReinvestedUSD_gt: BigDecimal
  feesReinvestedUSD_lt: BigDecimal
  feesReinvestedUSD_gte: BigDecimal
  feesReinvestedUSD_lte: BigDecimal
  feesReinvestedUSD_in: [BigDecimal!]
  feesReinvestedUSD_not_in: [BigDecimal!]
  tvl0: BigInt
  tvl0_not: BigInt
  tvl0_gt: BigInt
  tvl0_lt: BigInt
  tvl0_gte: BigInt
  tvl0_lte: BigInt
  tvl0_in: [BigInt!]
  tvl0_not_in: [BigInt!]
  tvl1: BigInt
  tvl1_not: BigInt
  tvl1_gt: BigInt
  tvl1_lt: BigInt
  tvl1_gte: BigInt
  tvl1_lte: BigInt
  tvl1_in: [BigInt!]
  tvl1_not_in: [BigInt!]
  tvlUSD: BigDecimal
  tvlUSD_not: BigDecimal
  tvlUSD_gt: BigDecimal
  tvlUSD_lt: BigDecimal
  tvlUSD_gte: BigDecimal
  tvlUSD_lte: BigDecimal
  tvlUSD_in: [BigDecimal!]
  tvlUSD_not_in: [BigDecimal!]
  pricePerShare: BigDecimal
  pricePerShare_not: BigDecimal
  pricePerShare_gt: BigDecimal
  pricePerShare_lt: BigDecimal
  pricePerShare_gte: BigDecimal
  pricePerShare_lte: BigDecimal
  pricePerShare_in: [BigDecimal!]
  pricePerShare_not_in: [BigDecimal!]
  conversion: String
  conversion_not: String
  conversion_gt: String
  conversion_lt: String
  conversion_gte: String
  conversion_lte: String
  conversion_in: [String!]
  conversion_not_in: [String!]
  conversion_contains: String
  conversion_contains_nocase: String
  conversion_not_contains: String
  conversion_not_contains_nocase: String
  conversion_starts_with: String
  conversion_starts_with_nocase: String
  conversion_not_starts_with: String
  conversion_not_starts_with_nocase: String
  conversion_ends_with: String
  conversion_ends_with_nocase: String
  conversion_not_ends_with: String
  conversion_not_ends_with_nocase: String
  conversion_: UniswapV3HypervisorConversion_filter
  accountCount: BigInt
  accountCount_not: BigInt
  accountCount_gt: BigInt
  accountCount_lt: BigInt
  accountCount_gte: BigInt
  accountCount_lte: BigInt
  accountCount_in: [BigInt!]
  accountCount_not_in: [BigInt!]
  deposits_: UniswapV3Deposit_filter
  rebalances_: UniswapV3Rebalance_filter
  withdraws_: UniswapV3Withdraw_filter
  dayData_: UniswapV3HypervisorDayData_filter
  feeUpdates_: UniswapV3FeeUpdate_filter
  lastUpdated: BigInt
  lastUpdated_not: BigInt
  lastUpdated_gt: BigInt
  lastUpdated_lt: BigInt
  lastUpdated_gte: BigInt
  lastUpdated_lte: BigInt
  lastUpdated_in: [BigInt!]
  lastUpdated_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapV3Hypervisor_filter]
  or: [UniswapV3Hypervisor_filter]
}

enum UniswapV3Hypervisor_orderBy {
  id
  factory
  factory__id
  factory__hypervisorCount
  factory__grossFeesClaimedUSD
  factory__protocolFeesCollectedUSD
  factory__feesReinvestedUSD
  factory__tvlUSD
  version
  owner
  created
  symbol
  pool
  pool__id
  pool__fee
  pool__sqrtPriceX96
  pool__lastSwapTime
  pool__lastHypervisorRefreshTime
  fee
  tick
  baseLower
  baseUpper
  baseLiquidity
  baseAmount0
  baseAmount1
  baseTokensOwed0
  baseTokensOwed1
  baseFeeGrowthInside0LastX128
  baseFeeGrowthInside1LastX128
  baseFeeGrowthInside0LastRebalanceX128
  baseFeeGrowthInside1LastRebalanceX128
  limitLower
  limitUpper
  limitLiquidity
  limitAmount0
  limitAmount1
  limitTokensOwed0
  limitTokensOwed1
  limitFeeGrowthInside0LastX128
  limitFeeGrowthInside1LastX128
  limitFeeGrowthInside0LastRebalanceX128
  limitFeeGrowthInside1LastRebalanceX128
  deposit0Max
  deposit1Max
  totalSupply
  maxTotalSupply
  grossFeesClaimed0
  grossFeesClaimed1
  grossFeesClaimedUSD
  protocolFeesCollected0
  protocolFeesCollected1
  protocolFeesCollectedUSD
  feesReinvested0
  feesReinvested1
  feesReinvestedUSD
  tvl0
  tvl1
  tvlUSD
  pricePerShare
  conversion
  conversion__id
  conversion__baseTokenIndex
  conversion__priceTokenInBase
  conversion__priceBaseInUSD
  accountCount
  deposits
  rebalances
  withdraws
  dayData
  feeUpdates
  lastUpdated
}

type UniswapV3Pool {
  id: ID!
  token0: Token!
  token1: Token!
  fee: Int!
  sqrtPriceX96: BigInt!
  hypervisors: [String!]!
  lastSwapTime: BigInt!
  lastHypervisorRefreshTime: BigInt!
}

input UniswapV3Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  fee: Int
  fee_not: Int
  fee_gt: Int
  fee_lt: Int
  fee_gte: Int
  fee_lte: Int
  fee_in: [Int!]
  fee_not_in: [Int!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  hypervisors: [String!]
  hypervisors_not: [String!]
  hypervisors_contains: [String!]
  hypervisors_contains_nocase: [String!]
  hypervisors_not_contains: [String!]
  hypervisors_not_contains_nocase: [String!]
  lastSwapTime: BigInt
  lastSwapTime_not: BigInt
  lastSwapTime_gt: BigInt
  lastSwapTime_lt: BigInt
  lastSwapTime_gte: BigInt
  lastSwapTime_lte: BigInt
  lastSwapTime_in: [BigInt!]
  lastSwapTime_not_in: [BigInt!]
  lastHypervisorRefreshTime: BigInt
  lastHypervisorRefreshTime_not: BigInt
  lastHypervisorRefreshTime_gt: BigInt
  lastHypervisorRefreshTime_lt: BigInt
  lastHypervisorRefreshTime_gte: BigInt
  lastHypervisorRefreshTime_lte: BigInt
  lastHypervisorRefreshTime_in: [BigInt!]
  lastHypervisorRefreshTime_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapV3Pool_filter]
  or: [UniswapV3Pool_filter]
}

enum UniswapV3Pool_orderBy {
  id
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  fee
  sqrtPriceX96
  hypervisors
  lastSwapTime
  lastHypervisorRefreshTime
}

type UniswapV3Rebalance {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  block: BigInt!
  timestamp: BigInt!
  tick: Int!
  baseLower: Int!
  baseUpper: Int!
  baseLiquidity: BigInt!
  baseAmount0: BigInt!
  baseAmount1: BigInt!
  limitLower: Int!
  limitUpper: Int!
  limitLiquidity: BigInt!
  limitAmount0: BigInt!
  limitAmount1: BigInt!
  totalAmount0: BigInt!
  totalAmount1: BigInt!
  totalAmountUSD: BigDecimal!
  grossFees0: BigInt!
  grossFees1: BigInt!
  grossFeesUSD: BigDecimal!
  protocolFees0: BigInt!
  protocolFees1: BigInt!
  protocolFeesUSD: BigDecimal!
  netFees0: BigInt!
  netFees1: BigInt!
  netFeesUSD: BigDecimal!
  totalSupply: BigInt!
}

input UniswapV3Rebalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: UniswapV3Hypervisor_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  tick: Int
  tick_not: Int
  tick_gt: Int
  tick_lt: Int
  tick_gte: Int
  tick_lte: Int
  tick_in: [Int!]
  tick_not_in: [Int!]
  baseLower: Int
  baseLower_not: Int
  baseLower_gt: Int
  baseLower_lt: Int
  baseLower_gte: Int
  baseLower_lte: Int
  baseLower_in: [Int!]
  baseLower_not_in: [Int!]
  baseUpper: Int
  baseUpper_not: Int
  baseUpper_gt: Int
  baseUpper_lt: Int
  baseUpper_gte: Int
  baseUpper_lte: Int
  baseUpper_in: [Int!]
  baseUpper_not_in: [Int!]
  baseLiquidity: BigInt
  baseLiquidity_not: BigInt
  baseLiquidity_gt: BigInt
  baseLiquidity_lt: BigInt
  baseLiquidity_gte: BigInt
  baseLiquidity_lte: BigInt
  baseLiquidity_in: [BigInt!]
  baseLiquidity_not_in: [BigInt!]
  baseAmount0: BigInt
  baseAmount0_not: BigInt
  baseAmount0_gt: BigInt
  baseAmount0_lt: BigInt
  baseAmount0_gte: BigInt
  baseAmount0_lte: BigInt
  baseAmount0_in: [BigInt!]
  baseAmount0_not_in: [BigInt!]
  baseAmount1: BigInt
  baseAmount1_not: BigInt
  baseAmount1_gt: BigInt
  baseAmount1_lt: BigInt
  baseAmount1_gte: BigInt
  baseAmount1_lte: BigInt
  baseAmount1_in: [BigInt!]
  baseAmount1_not_in: [BigInt!]
  limitLower: Int
  limitLower_not: Int
  limitLower_gt: Int
  limitLower_lt: Int
  limitLower_gte: Int
  limitLower_lte: Int
  limitLower_in: [Int!]
  limitLower_not_in: [Int!]
  limitUpper: Int
  limitUpper_not: Int
  limitUpper_gt: Int
  limitUpper_lt: Int
  limitUpper_gte: Int
  limitUpper_lte: Int
  limitUpper_in: [Int!]
  limitUpper_not_in: [Int!]
  limitLiquidity: BigInt
  limitLiquidity_not: BigInt
  limitLiquidity_gt: BigInt
  limitLiquidity_lt: BigInt
  limitLiquidity_gte: BigInt
  limitLiquidity_lte: BigInt
  limitLiquidity_in: [BigInt!]
  limitLiquidity_not_in: [BigInt!]
  limitAmount0: BigInt
  limitAmount0_not: BigInt
  limitAmount0_gt: BigInt
  limitAmount0_lt: BigInt
  limitAmount0_gte: BigInt
  limitAmount0_lte: BigInt
  limitAmount0_in: [BigInt!]
  limitAmount0_not_in: [BigInt!]
  limitAmount1: BigInt
  limitAmount1_not: BigInt
  limitAmount1_gt: BigInt
  limitAmount1_lt: BigInt
  limitAmount1_gte: BigInt
  limitAmount1_lte: BigInt
  limitAmount1_in: [BigInt!]
  limitAmount1_not_in: [BigInt!]
  totalAmount0: BigInt
  totalAmount0_not: BigInt
  totalAmount0_gt: BigInt
  totalAmount0_lt: BigInt
  totalAmount0_gte: BigInt
  totalAmount0_lte: BigInt
  totalAmount0_in: [BigInt!]
  totalAmount0_not_in: [BigInt!]
  totalAmount1: BigInt
  totalAmount1_not: BigInt
  totalAmount1_gt: BigInt
  totalAmount1_lt: BigInt
  totalAmount1_gte: BigInt
  totalAmount1_lte: BigInt
  totalAmount1_in: [BigInt!]
  totalAmount1_not_in: [BigInt!]
  totalAmountUSD: BigDecimal
  totalAmountUSD_not: BigDecimal
  totalAmountUSD_gt: BigDecimal
  totalAmountUSD_lt: BigDecimal
  totalAmountUSD_gte: BigDecimal
  totalAmountUSD_lte: BigDecimal
  totalAmountUSD_in: [BigDecimal!]
  totalAmountUSD_not_in: [BigDecimal!]
  grossFees0: BigInt
  grossFees0_not: BigInt
  grossFees0_gt: BigInt
  grossFees0_lt: BigInt
  grossFees0_gte: BigInt
  grossFees0_lte: BigInt
  grossFees0_in: [BigInt!]
  grossFees0_not_in: [BigInt!]
  grossFees1: BigInt
  grossFees1_not: BigInt
  grossFees1_gt: BigInt
  grossFees1_lt: BigInt
  grossFees1_gte: BigInt
  grossFees1_lte: BigInt
  grossFees1_in: [BigInt!]
  grossFees1_not_in: [BigInt!]
  grossFeesUSD: BigDecimal
  grossFeesUSD_not: BigDecimal
  grossFeesUSD_gt: BigDecimal
  grossFeesUSD_lt: BigDecimal
  grossFeesUSD_gte: BigDecimal
  grossFeesUSD_lte: BigDecimal
  grossFeesUSD_in: [BigDecimal!]
  grossFeesUSD_not_in: [BigDecimal!]
  protocolFees0: BigInt
  protocolFees0_not: BigInt
  protocolFees0_gt: BigInt
  protocolFees0_lt: BigInt
  protocolFees0_gte: BigInt
  protocolFees0_lte: BigInt
  protocolFees0_in: [BigInt!]
  protocolFees0_not_in: [BigInt!]
  protocolFees1: BigInt
  protocolFees1_not: BigInt
  protocolFees1_gt: BigInt
  protocolFees1_lt: BigInt
  protocolFees1_gte: BigInt
  protocolFees1_lte: BigInt
  protocolFees1_in: [BigInt!]
  protocolFees1_not_in: [BigInt!]
  protocolFeesUSD: BigDecimal
  protocolFeesUSD_not: BigDecimal
  protocolFeesUSD_gt: BigDecimal
  protocolFeesUSD_lt: BigDecimal
  protocolFeesUSD_gte: BigDecimal
  protocolFeesUSD_lte: BigDecimal
  protocolFeesUSD_in: [BigDecimal!]
  protocolFeesUSD_not_in: [BigDecimal!]
  netFees0: BigInt
  netFees0_not: BigInt
  netFees0_gt: BigInt
  netFees0_lt: BigInt
  netFees0_gte: BigInt
  netFees0_lte: BigInt
  netFees0_in: [BigInt!]
  netFees0_not_in: [BigInt!]
  netFees1: BigInt
  netFees1_not: BigInt
  netFees1_gt: BigInt
  netFees1_lt: BigInt
  netFees1_gte: BigInt
  netFees1_lte: BigInt
  netFees1_in: [BigInt!]
  netFees1_not_in: [BigInt!]
  netFeesUSD: BigDecimal
  netFeesUSD_not: BigDecimal
  netFeesUSD_gt: BigDecimal
  netFeesUSD_lt: BigDecimal
  netFeesUSD_gte: BigDecimal
  netFeesUSD_lte: BigDecimal
  netFeesUSD_in: [BigDecimal!]
  netFeesUSD_not_in: [BigDecimal!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapV3Rebalance_filter]
  or: [UniswapV3Rebalance_filter]
}

enum UniswapV3Rebalance_orderBy {
  id
  hypervisor
  hypervisor__id
  hypervisor__version
  hypervisor__owner
  hypervisor__created
  hypervisor__symbol
  hypervisor__fee
  hypervisor__tick
  hypervisor__baseLower
  hypervisor__baseUpper
  hypervisor__baseLiquidity
  hypervisor__baseAmount0
  hypervisor__baseAmount1
  hypervisor__baseTokensOwed0
  hypervisor__baseTokensOwed1
  hypervisor__baseFeeGrowthInside0LastX128
  hypervisor__baseFeeGrowthInside1LastX128
  hypervisor__baseFeeGrowthInside0LastRebalanceX128
  hypervisor__baseFeeGrowthInside1LastRebalanceX128
  hypervisor__limitLower
  hypervisor__limitUpper
  hypervisor__limitLiquidity
  hypervisor__limitAmount0
  hypervisor__limitAmount1
  hypervisor__limitTokensOwed0
  hypervisor__limitTokensOwed1
  hypervisor__limitFeeGrowthInside0LastX128
  hypervisor__limitFeeGrowthInside1LastX128
  hypervisor__limitFeeGrowthInside0LastRebalanceX128
  hypervisor__limitFeeGrowthInside1LastRebalanceX128
  hypervisor__deposit0Max
  hypervisor__deposit1Max
  hypervisor__totalSupply
  hypervisor__maxTotalSupply
  hypervisor__grossFeesClaimed0
  hypervisor__grossFeesClaimed1
  hypervisor__grossFeesClaimedUSD
  hypervisor__protocolFeesCollected0
  hypervisor__protocolFeesCollected1
  hypervisor__protocolFeesCollectedUSD
  hypervisor__feesReinvested0
  hypervisor__feesReinvested1
  hypervisor__feesReinvestedUSD
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__pricePerShare
  hypervisor__accountCount
  hypervisor__lastUpdated
  block
  timestamp
  tick
  baseLower
  baseUpper
  baseLiquidity
  baseAmount0
  baseAmount1
  limitLower
  limitUpper
  limitLiquidity
  limitAmount0
  limitAmount1
  totalAmount0
  totalAmount1
  totalAmountUSD
  grossFees0
  grossFees1
  grossFeesUSD
  protocolFees0
  protocolFees1
  protocolFeesUSD
  netFees0
  netFees1
  netFeesUSD
  totalSupply
}

type UniswapV3Withdraw {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  block: BigInt!
  timestamp: BigInt!
  sender: Bytes!
  to: Bytes!
  shares: BigInt!
  amount0: BigInt!
  amount1: BigInt!
  amountUSD: BigDecimal!
}

input UniswapV3Withdraw_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hypervisor: String
  hypervisor_not: String
  hypervisor_gt: String
  hypervisor_lt: String
  hypervisor_gte: String
  hypervisor_lte: String
  hypervisor_in: [String!]
  hypervisor_not_in: [String!]
  hypervisor_contains: String
  hypervisor_contains_nocase: String
  hypervisor_not_contains: String
  hypervisor_not_contains_nocase: String
  hypervisor_starts_with: String
  hypervisor_starts_with_nocase: String
  hypervisor_not_starts_with: String
  hypervisor_not_starts_with_nocase: String
  hypervisor_ends_with: String
  hypervisor_ends_with_nocase: String
  hypervisor_not_ends_with: String
  hypervisor_not_ends_with_nocase: String
  hypervisor_: UniswapV3Hypervisor_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  amount0: BigInt
  amount0_not: BigInt
  amount0_gt: BigInt
  amount0_lt: BigInt
  amount0_gte: BigInt
  amount0_lte: BigInt
  amount0_in: [BigInt!]
  amount0_not_in: [BigInt!]
  amount1: BigInt
  amount1_not: BigInt
  amount1_gt: BigInt
  amount1_lt: BigInt
  amount1_gte: BigInt
  amount1_lte: BigInt
  amount1_in: [BigInt!]
  amount1_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapV3Withdraw_filter]
  or: [UniswapV3Withdraw_filter]
}

enum UniswapV3Withdraw_orderBy {
  id
  hypervisor
  hypervisor__id
  hypervisor__version
  hypervisor__owner
  hypervisor__created
  hypervisor__symbol
  hypervisor__fee
  hypervisor__tick
  hypervisor__baseLower
  hypervisor__baseUpper
  hypervisor__baseLiquidity
  hypervisor__baseAmount0
  hypervisor__baseAmount1
  hypervisor__baseTokensOwed0
  hypervisor__baseTokensOwed1
  hypervisor__baseFeeGrowthInside0LastX128
  hypervisor__baseFeeGrowthInside1LastX128
  hypervisor__baseFeeGrowthInside0LastRebalanceX128
  hypervisor__baseFeeGrowthInside1LastRebalanceX128
  hypervisor__limitLower
  hypervisor__limitUpper
  hypervisor__limitLiquidity
  hypervisor__limitAmount0
  hypervisor__limitAmount1
  hypervisor__limitTokensOwed0
  hypervisor__limitTokensOwed1
  hypervisor__limitFeeGrowthInside0LastX128
  hypervisor__limitFeeGrowthInside1LastX128
  hypervisor__limitFeeGrowthInside0LastRebalanceX128
  hypervisor__limitFeeGrowthInside1LastRebalanceX128
  hypervisor__deposit0Max
  hypervisor__deposit1Max
  hypervisor__totalSupply
  hypervisor__maxTotalSupply
  hypervisor__grossFeesClaimed0
  hypervisor__grossFeesClaimed1
  hypervisor__grossFeesClaimedUSD
  hypervisor__protocolFeesCollected0
  hypervisor__protocolFeesCollected1
  hypervisor__protocolFeesCollectedUSD
  hypervisor__feesReinvested0
  hypervisor__feesReinvested1
  hypervisor__feesReinvestedUSD
  hypervisor__tvl0
  hypervisor__tvl1
  hypervisor__tvlUSD
  hypervisor__pricePerShare
  hypervisor__accountCount
  hypervisor__lastUpdated
  block
  timestamp
  sender
  to
  shares
  amount0
  amount1
  amountUSD
}

type User {
  id: ID!
  activeAccount: Account!
  accountsOwned(skip: Int = 0, first: Int = 100, orderBy: Account_orderBy, orderDirection: OrderDirection, where: Account_filter): [Account!]
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  activeAccount: String
  activeAccount_not: String
  activeAccount_gt: String
  activeAccount_lt: String
  activeAccount_gte: String
  activeAccount_lte: String
  activeAccount_in: [String!]
  activeAccount_not_in: [String!]
  activeAccount_contains: String
  activeAccount_contains_nocase: String
  activeAccount_not_contains: String
  activeAccount_not_contains_nocase: String
  activeAccount_starts_with: String
  activeAccount_starts_with_nocase: String
  activeAccount_not_starts_with: String
  activeAccount_not_starts_with_nocase: String
  activeAccount_ends_with: String
  activeAccount_ends_with_nocase: String
  activeAccount_not_ends_with: String
  activeAccount_not_ends_with_nocase: String
  activeAccount_: Account_filter
  accountsOwned_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  activeAccount
  activeAccount__id
  activeAccount__type
  activeAccount__gammaDeposited
  activeAccount__gammaEarnedRealized
  activeAccount__hypervisorCount
  accountsOwned
}

type VisorTemplate {
  id: ID!
  address: Bytes!
  active: Boolean!
}

input VisorTemplate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VisorTemplate_filter]
  or: [VisorTemplate_filter]
}

enum VisorTemplate_orderBy {
  id
  address
  active
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
